#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

typedef long long ll; 

class TheLargestString {
public:
	string find(string s, string t);
};

string TheLargestString::find(string s, string t) {
	/*
	Let best[j] = optimal solution of length j.

	Suppose the best solution has characters from index i at its last position.
	i.e. s[i] and t[i]
	Let k = the length of the best solution
	Then best[k] = s part of best[j] + s[i] + t part of best[j] + t[i]
	where j < k. Note that k = i+1.  j < i+1  or j <= i
	*/
	vector< pair<string, string> > best(s.length() + 1, make_pair("",""));

	// for each index, check suboptimal solution
	int N = s.length();
	for(int i=0; i < N; i++) {
		for(int j=i; j >= 0; j--) {
			best[j+1] = max(best[j+1], make_pair(best[j].first + s[i], best[j].second + t[i]));
		}
	}
	string res = "";
	for(int i=0; i <= N; i++)
		res = max(res, best[i].first + best[i].second);

	return res;
	
}
 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	TheLargestString *obj;
	string answer;
	obj = new TheLargestString();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "ab";
	p1 = "zy";
	p2 = "by";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "abacaba";
	p1 = "zzzaaaa";
	p2 = "cbaaaa";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "x";
	p1 = "x";
	p2 = "xx";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "abbabbabbababaaaabbababab";
	p1 = "bababbaabbbababbbbababaab";
	p2 = "bbbbbbbbbbbbbbbbbbaaab";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
