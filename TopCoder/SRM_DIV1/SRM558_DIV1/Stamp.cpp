#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
//int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
int INF = 50 * 50 * 100000;
typedef long long ll;
 
class Stamp {
public:
	int getMinimumCost(string, int, int);
};

int Stamp::getMinimumCost(string str, int stampCost, int pushCost) {
	int N = str.size();
    int res = 1 * stampCost + N * pushCost;
    int color[N];
    for(int i=0; i < N; i++) {
        if(str[i] == '*') color[i] = 7;
        else if(str[i] == 'R') color[i] = 1;
        else if(str[i] == 'G') color[i] = 2;
        else if(str[i] == 'B') color[i] = 4;
    }
    // best[i] = minimum numer of pushes needed to cover the range [0...i-1]
    
    int best[N+1];
    // try all stampSize
    for(int len = 2; len <= N; len++) {
        best[0] = 0;
        for(int i=1; i <= N; i++)
            best[i] = INF;
        
        int lim = N - len;
        for(int i=0; i <= lim; i++) {
            int curColor = 7;
            for(int j=i; j < N; j++) {
                curColor &= color[j];
                if( !curColor ) break;
                int seg = j - i + 1;
                if(seg < len) continue;
                int numPush = (seg + (len - 1) ) / len;
                best[j+1] = min(best[j+1], numPush + best[i]);
            }
        }
        if(best[N] == INF) continue;
        
        res = min(res, stampCost * len + pushCost * best[N]);
    }

    return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2;
	cout << "]" << endl;
	Stamp *obj;
	int answer;
	obj = new Stamp();
	clock_t startTime = clock();
	answer = obj->getMinimumCost(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "RRGGBB";
	p1 = 1;
	p2 = 1;
	p3 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "R**GB*";
	p1 = 1;
	p2 = 1;
	p3 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "BRRB";
	p1 = 2;
	p2 = 7;
	p3 = 30;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "R*RR*GG";
	p1 = 10;
	p2 = 58;
	p3 = 204;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "*B**B**B*BB*G*BBB**B**B*";
	p1 = 5;
	p2 = 2;
	p3 = 33;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "*R*RG*G*GR*RGG*G*GGR***RR*GG";
	p1 = 7;
	p2 = 1;
	p3 = 30;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
