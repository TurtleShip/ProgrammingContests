#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class MinskyMystery {
public:
	int computeAnswer(long long);
};
ll mod = 1000000009ll;
int MinskyMystery::computeAnswer(long long N) {
	
    if(N < 2) return -1;
    
    ll factor = 3ll;
    
    ll cap = ll(sqrt(N));
    while(factor<=cap && N % factor != 0)
        factor += 2ll;
    
    if(N % 2 == 0) factor = 2ll;
    if(N % factor != 0) factor = N;
    
    cout<<"factor : "<<factor<<endl;
    ll ans = factor % mod;
    ans %= mod;
    ans += ( (( 4*factor - 5) % mod) * (N%mod)) % mod;
    ans %= mod;
   
    //Summation part
    if(N == factor)
    {
        for(ll i = 2ll; (N+i-1ll)/i >= 1000000ll; i++)
            ans = (ans + (N+i-1)/i) % mod;
        
        for(ll x = min(1000000ll - 1ll, N-1ll); x >= 2ll; x--)
            ans = (ans + x*((N+x-2)/(x-1) - (N+x-1)/x))%mod;
 
        ans = (ans + 1) % mod;
    }
    else
    {
        for(ll i = 2ll; i <= factor; i+=1ll)
        {
            ans += ((N+i-1ll)/i) % mod;
            ans %= mod;
        }
    }
    
    return ans % mod;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	MinskyMystery *obj;
	int answer;
	obj = new MinskyMystery();
	clock_t startTime = clock();
	answer = obj->computeAnswer(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = 2ll;
	p1 = 9;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3ll;
	p1 = 27;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4ll;
	p1 = 16;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2401ll;
	p1 = 59058;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 24ll;
	p1 = 86;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
