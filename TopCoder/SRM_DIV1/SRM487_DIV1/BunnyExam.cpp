#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class BunnyExam {
public:
	double getExpected(int, int, vector <int>);
};

bool canDoIt(int,int,vector<int>);
bool backtrack(int,int);

const int maxN = 25;
int N;
bool isAdj[maxN][maxN];
int color[maxN];

double BunnyExam::getExpected(int m, int k, vector <int> linkage) {
	
    double dm = double(m);
    double dk = double(k);
    
    if(canDoIt(m,k,linkage)) return dm/dk;
    return -1.0;
}

bool canDoIt(int m, int k, vector<int> link)
{
    N = link.size() / 2;
    vector<int>A(N);
    vector<int>B(N);
    
    for(int i=0; i < N; i++)
    {
        A[i] = link[i*2];
        B[i] = link[i*2+1];
    }
    
    memset(isAdj, false, sizeof(isAdj));
    for(int i=0; i < N; i++)
        for(int j= i ; j < N; j++)
            if( abs(A[i] - A[j]) == 1 || abs(A[i] - B[j]) == 1 || abs(B[i] - A[j]) == 1 || abs(B[i] - B[j]) == 1 )
                isAdj[i][j] = isAdj[j][i] = true;

    //check for consecutive links
    for(int i=0; i < N; i++)
        if(isAdj[i][i]) return false;
    
    //Here on, there is no consecutive link
    if(k==1)
    {
        if(m>1) return false;
    }
    else if(k==2)
    {
        for(int i=0; i < N; i++)
            if(A[i] % 2 != B[i] % 2)
                return false;
    }
    else if(k<=4)
    {
        return backtrack(0,k);
    }
    return true;
}

bool backtrack(int pos, int k)
{
    if(pos == N) return true;
    
    for(int c=0; c < k; c++)
    {
        bool isValid = true;
        color[pos] = c;
        for(int j=0; j < pos; j++)
            if(isAdj[pos][j] && color[pos] == color[j])
                isValid = false;
        
        if(isValid && backtrack(pos+1, k))
            return true;
    }
    return false;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	BunnyExam *obj;
	double answer;
	obj = new BunnyExam();
	clock_t startTime = clock();
	answer = obj->getExpected(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	vector <int> p2;
	double p3;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 2;
	int t2[] = {1,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1.5;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 4;
	p1 = 2;
	int t2[] = {1,4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 8;
	p2.clear() /*{}*/;
	p3 = 0.25;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000000000;
	p1 = 1;
	int t2[] = {11,13,2010,487};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 128;
	p1 = 64;
	int t2[] = {32,16,8,4,2,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = -1.0;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 13;
	p1 = 3;
	int t2[] = {1,3,7,9,13,10,6,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 4.333333333333333;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
