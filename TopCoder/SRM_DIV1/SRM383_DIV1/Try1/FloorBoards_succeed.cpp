#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = 99999;
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class FloorBoards {
public:
	int layout(vector <string>);
};

int R;
int C;
int mem[11][1<<10];
vector<string> room;
/*
 "mask" is a binary number representing shape of the previous row.
 (i)th bit of mask is set to 1 if (i)th column of the previous row is a part of a vertical strip.
 0 otherwise.
 */

int rec(int idx, int mask)
{
    if(idx == R) return 0;
    
    int& res = mem[idx][mask];
    if(res!=-1) return res;
    
    res = INF;
    
    for(int i=0; i < (1<<C); i++)
    {
        //check validity of the current config
        bool isValid = true;
        for(int j=0; j < C; j++)
        {
            if( ((i>>j) & 1) && ( room[idx][j] == '#') )
            {
                isValid = false;
                break;
            }
        }
        if(!isValid) continue;
        
        //Count the number of vertical and horizontal strips to use for the current row.
        int vert = 0;
        int hori = 0;
        bool isHori = false;
        for(int j=0; j < C; j++)
        {
            /*
             It is a vertical strip.
             If the current column of the above row is also a part of a vertical strip,
             the current square is a part of the continuation of the previous vertical strip.
             Only use a new vertical strip if the previous column is not a part of a vertical strip.
             */
            if( (i>>j) & 1)
            {
                isHori = false;
                if( ((mask>>j) & 1) == 0 )
                    vert++;
            }
            else // The current square is either a pillar or a horizontal strip
            {
                if(room[idx][j] == '#') //It is a pillar
                {
                    isHori = false;
                }
                else //It is a horizontal strip
                {
                    if(!isHori)
                    {
                        isHori = true;
                        hori++;
                    }
                }
            }
        }
        res = min(res, vert + hori + rec(idx + 1, i));
    }
    return res;
}

int FloorBoards::layout(vector <string> _room) {
    room = _room;
    R = room.size();
    C = room[0].size();
    memset(mem, -1, sizeof(mem));
    
	return rec(0,0);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FloorBoards *obj;
	int answer;
	obj = new FloorBoards();
	clock_t startTime = clock();
	answer = obj->layout(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {".....",".....",".....",".....","....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {".......",".#..##.",".#.....",".#####.",".##..#.","....###"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"####","####","####","####"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"...#..","##....","#.#...",".#....","..#...","..#..#"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".#....","..#...",".....#","..##..","......",".#..#."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 9;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
