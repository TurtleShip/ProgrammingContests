#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;

class FoxAndHandle {
public:
	string lexSmallestName(string);
};

int numChar['z'+10];
int tmp['z'+10 ];

int getSum() {
    int res = 0;
    for(int i='a'; i <= 'z'; i++)
        res += numChar[i];
    return res;
}


string FoxAndHandle::lexSmallestName(string S) {
    string res = "";
    int N = S.size();
    memset(numChar, 0, sizeof(numChar));
    
    for(int i=0; i < N; i++)
        numChar[S[i]]++;
    
    for(int i='a'; i <= 'z'; i++)
        numChar[i] /= 2;
    
    while(getSum() > 0) {
        char stChar = 'z' + 1;
        int stPos = 0;
        for(int i=0; i < S.size(); i++) {
            if(0 < numChar[S[i]] && S[i] < stChar) {
                bool isValid = true;
                
                // check validity
                memset(tmp, 0, sizeof(tmp));
                for(int j=i; j < S.size(); j++)
                    tmp[S[j]]++;
                
                for(int j='a'; j <= 'z'; j++)
                    if(tmp[j] < numChar[j]) isValid = false;
                
                if(isValid) {
                    stChar = S[i];
                    stPos = i;
                }
            }
        }
        res += stChar;
        numChar[stChar]--;
        if(stPos < S.size() - 1)
            S = S.substr(stPos + 1);
    }
    
    return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	FoxAndHandle *obj;
	string answer;
	obj = new FoxAndHandle();
	clock_t startTime = clock();
	answer = obj->lexSmallestName(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "foxfox";
	p1 = "fox";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ccieliel";
	p1 = "ceil";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "abaabbab";
	p1 = "aabb";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "bbbbaaaa";
	p1 = "bbaa";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "fedcbafedcba";
	p1 = "afedcb";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "nodevillivedon";
	p1 = "deilvon";
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
