#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF =1000;
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class CuttingBitString {
public:
	int getmin(string);
};

set<string> S;

// multiply "up" with 5(= 101 in binary).
string multBinary(string up) {
    string res = "";
    string down = up + "00";
    int carry = 0;
    int N = down.size();
    int M = up.size();
    
    for(int i=0; i < N; i++) {
        int cur = down[N-1-i] - '0';
        if(i < M) cur += up[M-1-i] - '0';
        cur += carry;
        if(cur >= 2) {
            carry = 1;
            cur -= 2;
        } else {
            carry = 0;
        }
        char curCh = cur + '0';
        res += curCh;
//        res = curCh + res;
    }
    
    if(carry == 1) res += '1';
    
    reverse(res.begin(), res.end());
    return res;
}

void preprocess() {
    S.insert("1");
    string cur = "101";
    
    while(cur.size() <= 50) {
        S.insert(cur);
        cur = multBinary(cur);
    }
}

// dp[i] =  minimum number of pieces from [0...i-1]
int dp[55];

int CuttingBitString::getmin(string str) {
	preprocess();
    int N = str.size();
    
    for(int i=0; i <= N; i++)
        dp[i] = INF;
    dp[0] = 0;
    
    for(int i=0; i < N; i++) {
        int lim = N-i;
        for(int j=1; j <= lim; j++) {
            string curStr = str.substr(i, j);
            if(S.count(curStr) != 0) dp[i+j] = min(dp[i+j] , dp[i] + 1);
        }
    }
    
    return (dp[N] == INF) ? -1 : dp[N];
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	CuttingBitString *obj;
	int answer;
	obj = new CuttingBitString();
	clock_t startTime = clock();
	answer = obj->getmin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "101101101";
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "1111101";
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "00000";
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "110011011";
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "1000101011";
	p1 = -1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "111011100110101100101110111";
	p1 = 5;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
