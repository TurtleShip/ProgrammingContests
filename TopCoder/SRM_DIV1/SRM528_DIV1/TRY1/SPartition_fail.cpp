#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class SPartition {
public:
	long long getCount(string);
};

string s;
int N;
ll ans;

void subseq(string a, string b, int idx, int valid)
{
    if(idx == N)
    {
        ans++;
        return;
    }
    
    if(a.size() == N/2)
    {
        if(s[idx] == a[valid])
            subseq(a, b+s[idx], idx+1, valid+1);
    }else if(b.size() == N/2)
    {
        if(s[idx] == b[valid])
            subseq(a+s[idx], b, idx+1, valid+1);
    }else
    {
    	if(a.size() < b.size())
    	{
    		subseq(a,b + s[idx], idx+1, valid);
    		if(s[idx] == b[valid])
    			subseq(a + s[idx], b, idx+1, valid + 1);
    	}else if(a.size() > b.size())
    	{
    		subseq(a+s[idx], b, idx+1, valid);
    		if(s[idx] == a[valid])
    			subseq(a, b+s[idx], idx+1, valid+1);
    	} else //a.size9() == b.size()
    	{
    		subseq(a+s[idx],b,idx+1,valid);
    		subseq(a,b+s[idx], idx+1, valid);
    	}
    }
    
}


long long SPartition::getCount(string _s) {
	s = _s;
    N = s.size();
    ans = 0;
    //check if the input is valid
    ll tx = 0; //total number of x
    ll to = 0; //total number of o
    REP(i,0,N)
    if(s[i] == 'x') tx++;
    else to++;
    
    if(tx%2 == 1 || to %2 == 1) return 0;
    
    subseq("","",0,0);
    
    return ans;
}



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	SPartition *obj;
	long long answer;
	obj = new SPartition();
	clock_t startTime = clock();
	answer = obj->getCount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	long long p1;
	
	{
	// ----- test 0 -----
	p0 = "oxox";
	p1 = 2ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "oooxxx";
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "xoxxox";
	p1 = 4ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "xo";
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "ooooxoox";
	p1 = 8ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "ooxxoxox";
	p1 = 8ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
