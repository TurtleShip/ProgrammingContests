#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class LongLongNim {
public:
	int numberOfWins(int, vector <int>);
};

int N;
int M;
vector<int> moves;
/*
 map[i] = true if the current player loses when "i" number of coins are left.
 */
map<int,bool> info;
int maxMove;
int minMove;
/*
 Given that the current player has "num" number of coins left,
 return true if he wins.
 Saving Win/Lost information for each number takes enormous amount of memory.
 We need to take advantage of the fact that isWinning depends on numbers
 in [num - max(move), num - min(move)]
 We already know that 1 <= move <= 22
 */
bool isWinning(int num)
{
    bool result = false;
    for(int i=0; i < M; i++)
    {
        if(moves[i] <= num)
        {
            if(!info[num - moves[i]])
            {
                result = true;
                break;
            }
        }
        else
            break;
    }
    info[num] = result;
    if(num >= maxMove)
    {
        info.erase(num-maxMove);
    }
    return result;
}

int LongLongNim::numberOfWins(int maxN, vector <int> _moves) {
    moves = _moves;
    M = moves.size();
    maxMove = *max_element(moves.begin(), moves.end());
    minMove = *min_element(moves.begin(), moves.end());

    for(int i=0; i < minMove; i++)
        info[i] = false;
    info[minMove] = true;
    
    int ans = min(minMove - 1, maxN);
    for(int i=(minMove + 1); i <= maxN; i++)
    {
        if(!isWinning(i))
            ans++;
    }

    return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	LongLongNim *obj;
	int answer;
	obj = new LongLongNim();
	clock_t startTime = clock();
	answer = obj->numberOfWins(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 20;
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 999;
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 499;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1000000000;
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 333333333;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 6543;
	int t1[] = {2,4,7,11,20};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1637;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
