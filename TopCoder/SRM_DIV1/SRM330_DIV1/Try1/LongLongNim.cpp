#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define FOR(i,a,b) for(int i=a; i < b; i++)
#define FORE(i, a, b) for(int i=a; i <=b; i++)

typedef long long ll; 
 
class LongLongNim {
public:
	int numberOfWins(int maxN, vector <int> moves);
};

//true if the first player can win

int LongLongNim::numberOfWins(int maxN, vector <int> moves){
    set<int> Mult;
    map<int, int> Last;
    vector<int> Sol;
    int m = (1 << 22) - 1;
    int ret = -1;
    
    //Number from right to left, i.e. m[21],m[20],...,m[0],
    //m[i] = bit in m at ith position is 0 if Second player wins at ith position and 1 = losing position
    
    /*I understand we are counting winning positions [1,maxN], thus
     excluding 0. but we need information on 0th position to recognize
     a pattern. Counting this as a winning position is compensated by
     making ret = -1 */
    for(int i=0; i <= maxN; i++)
    {
        m <<= 1; //Assume we are at a winning position
        bool win = true; 
        for(int j=0; j < moves.size(); j++)
        {
            int k = moves[j];
            
            // If we can move to a winning position, we lose.
           if( ((m>>k) & 1) == 0)
            {
                win = false;
                break;
            }
        }
        if(win) ret++;
        else m++;
                 
        m &= (( 1 << 22) - 1); //keep only the last 22 bits of m
            
        if(Mult.find(m) != Mult.end()) //a cycle found
        {
            int len = i - Last[m]; // length of a cycle
            
            cout<<"cycle len : "<<len<<endl;
            int nr = (maxN - i) / len ; //number of cycles left, excluding the current cycle
            i += nr * len;
            ret += nr * (ret - Sol[Last[m]]);
        }
        Last[m] = i;
        Mult.insert(m);
        Sol.push_back(ret);
    }
    return ret;
}

 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	LongLongNim *obj;
	int answer;
	obj = new LongLongNim();
	clock_t startTime = clock();
	answer = obj->numberOfWins(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 20;
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 999;
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 499;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1000000000;
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 333333333;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 6543;
	int t1[] = {2,4,7,11,20};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1637;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
