#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class TurtleSpy {
public:
	double maxDistance(vector <string>);
};

double TurtleSpy::maxDistance(vector <string> cmd) {
	
    int maxDeg = 360;
    double PI = acos(-1);
    int f = 0;
    int b = 0;
    vector<int> degs;
    
    int N =cmd.size();
    
    for(int i=0; i < N; i++)
    {
        stringstream ss;
        ss<<cmd[i];
        string str;
        int val;
        ss>>str>>val;
        if(str == "forward") f += val;
        else if(str == "backward") b += val;
        else if(str == "left") degs.push_back(-val);
        else degs.push_back(val);
    }
    
    int D = degs.size();
    bool canReach[maxDeg];
    memset(canReach, false, sizeof(canReach));
    
    //No extra degrees need to stay at the current degree.
    canReach[0] = true;     
    
    for(int i=0; i < D; i++)
    {   
        bool temp[maxDeg];
        memset(temp, false, sizeof(temp));
        
        for(int j=0; j < maxDeg; j++)
            if(canReach[j])
                temp[ (j + degs[i] + 360) % 360 ] = true;
        
        for(int j=0; j < maxDeg; j++)
            canReach[j] |= temp[j];
    }
    
    //we need to get as close as we can to 180
    double deg = 0.0;
    for(int i=0; i < 180; i++)
        if( canReach[180 - i] || canReach[180 + i] )
        {
            deg = 180 - i;
            break;
        }
   
    if(f < b)
        swap(f,b);
    
    double df = double(f);
    double db = double(b);
    return sqrt(df*df + db*db - 2.0 * df * db * cos(deg * PI / 180.0));
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TurtleSpy *obj;
	double answer;
	obj = new TurtleSpy();
	clock_t startTime = clock();
	answer = obj->maxDistance(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	double p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"forward 100","backward 100","left 90"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 141.4213562373095;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"left 45","forward 100","right 45","forward 100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 200.0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"left 10","forward 40","right 30","left 10","backward 4","forward 4"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 40.58520737741619;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
