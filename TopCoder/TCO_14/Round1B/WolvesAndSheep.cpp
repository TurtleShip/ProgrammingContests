#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

typedef long long ll; 

class WolvesAndSheep {
public:
	int getmin(vector <string> field);
};


bool hasVerticalFences[50]; // [i] = true if there is a fence between (i)th column and (i+1)th column
bool hasHorizontalFences[50]; // [i] = true if there is a fence between (i)th row and (i+1)th row
int empty = 0;
int wolf = 1;
int sheep = 2;

int useThisFence(const vector<string>&, const int&, const int&, const int&);
bool isValidConfig(const vector<string>&, const int&, const int&);
vector<int> resultBySection(const string&, const int&);
int getTotalFenceSlots(const int&);

int WolvesAndSheep::getmin(vector <string> field) {
	
	int nR = field.size();
	int nC = field[0].size();
	int best = nR + nC;
	fill(hasVerticalFences, hasVerticalFences+getTotalFenceSlots(nC), false);
	hasVerticalFences[nC-1] = true; // we put an imaginary fence right to the rightmost column
	hasHorizontalFences[nR-1] = true; // we put an imaginary fence down to the downmost row

	for(int mask = 0; mask < (1<<getTotalFenceSlots(nC)); mask++) {
		best = min(best, useThisFence(field, nR, nC, mask));
	}

	return best;
}


int useThisFence(const vector<string>& field, const int& nR, const int& nC, const int& mask) {
	int totalColFences = 0;
	int totalRowFences = 0;
	// get the current vertical fences from bitmask
	for(int i=0; i < getTotalFenceSlots(nC); i++) {
		hasVerticalFences[i] = ((1<<i) & mask) != 0;
		if(hasVerticalFences[i]) totalColFences++;
	}

	// check if the current fences are valid
	for(int r=0; r < nR; r++)
		if(!isValidConfig(field, r, nC))
			return nR+nC;

	vector<int> previousRowBySection(nC, empty);
	for(int r=0; r < nR; r++) {
		vector<int> curRowBySection = resultBySection(field[r], nC);

		bool needFance = false;
		for(int i=0; i < curRowBySection.size(); i++) {
			if(previousRowBySection[i] == empty || curRowBySection[i] == empty) continue;
			if(previousRowBySection[i] != curRowBySection[i]) needFance = true;
		}
		if(needFance) {
			totalRowFences++;
		} else {
			// copy over section by section
			for(int i=0; i < curRowBySection.size(); i++) {
				if(curRowBySection[i] == empty) curRowBySection[i] = previousRowBySection[i];
			}
		}	
		
		previousRowBySection = curRowBySection;
	}


	return totalColFences + totalRowFences;
}

bool isValidConfig(const vector<string>& field, const int& curRow, const int& nC) {
	int startCol = 0;
	bool isValid = true;
	for(int endCol=0; isValid && endCol < nC; endCol++) {
		if(hasVerticalFences[endCol]) {
			bool hasSheep = false;
			bool hasWolf = false;
			for(int curCol = startCol; curCol <= endCol; curCol++) {
				if(field[curRow][curCol] == 'S') hasSheep = true;
				else if(field[curRow][curCol] == 'W') hasWolf = true;
			}
			// both sheep and wolf should not be together
			isValid = !(hasSheep && hasWolf);
			startCol = endCol+1;
		}
	}

	return isValid;
}

vector<int> resultBySection(const string& curRow, const int& nC) {
	int startCol = 0;
	vector<int> result;
	for(int endCol=0; endCol < nC; endCol++) {
		if(hasVerticalFences[endCol]) {
			int curResult = empty;
			for(int curCol = startCol; curCol <= endCol; curCol++) {
				if(curRow[curCol] == 'S') curResult = sheep;
				else if(curRow[curCol] == 'W') curResult = wolf;
			}
			result.push_back(curResult);
			startCol = endCol+1;
		}
	}
	return result;
}

int getTotalFenceSlots(const int& n) {
	return n - 1;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	WolvesAndSheep *obj;
	int answer;
	obj = new WolvesAndSheep();
	clock_t startTime = clock();
	answer = obj->getmin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"W.WSS","WW.S.",".SSS.","SSS.S",".SS.S"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {".....",".....","....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {".SS","...","S..","W.W"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"WWWSWWSSWWW","WWSWW.SSWWW","WS.WSWWWWS."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".W.S.W.W","W.W.S.W.",".S.S.W.W","S.S.S.W.",".S.W.W.S","S.S.W.W.",".W.W.W.S","W.W.S.S."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"W.SSWWSSSW.SS",".SSSSW.SSWWWW",".WWWWS.WSSWWS","SS.WSS..W.WWS","WSSS.SSWS.W.S","WSS.WS...WWWS","S.WW.S.SWWWSW","WSSSS.SSW...S","S.WWSW.WWSWSW",".WSSS.WWSWWWS","..SSSS.WWWSSS","SSWSWWS.W.SSW","S.WSWS..WSSS.","WS....W..WSS."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 24;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"WW..SS","WW..SS","......","......","SS..WW","SS..WW"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
