#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class AlternateColors {
public:
	string getColor(long long, long long, long long, long long);
};

string AlternateColors::getColor(long long r, long long g, long long b, long long k) {
	ll cut = (k/3ll);
    if(k%3ll) cut += 1ll;
    
    string res[3] = {"RED", "GREEN", "BLUE"};

    if(r >= cut && g >= cut && b >= cut) return res[ (k+2ll)%3ll ];
    
    // one of them is smaller than cut
    ll minCut = min( min(r,g), b);
    
    r -= minCut;
    g -= minCut;
    b -= minCut;
    
    k -= minCut * 3ll;
    
    // update cut
    cut = k / 2ll;
    if(k%2ll) cut += 1ll;
    printf("r = %lld, g = %lld, b = %lld\n",r,g,b);
    if(r == 0) {
        if(g < cut) return res[2];
        if(b < cut) return res[1];
        if(k%2ll == 1) return res[1];
        return res[2];
    }
    
    if(g == 0) {
        if(r < cut) return res[2];
        if(b < cut) return res[0];
        if(k%2ll == 1) return res[0];
        return res[2];
    }
    
    if(b == 0) {
        if(r < cut) return res[1];
        if(g < cut) return res[0];
        if(k%2ll == 1) return res[0];
        return res[1];
        
    }
    
    return "FUCK";
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, long long p3, bool hasAnswer, string p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	AlternateColors *obj;
	string answer;
	obj = new AlternateColors();
	clock_t startTime = clock();
	answer = obj->getColor(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p4 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	long long p3;
	string p4;
	
	{
	// ----- test 0 -----
	p0 = 1ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 3ll;
	p4 = "BLUE";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3ll;
	p1 = 4ll;
	p2 = 5ll;
	p3 = 4ll;
	p4 = "RED";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 7ll;
	p1 = 7ll;
	p2 = 1ll;
	p3 = 7ll;
	p4 = "GREEN";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1000000000000ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 1000000000002ll;
	p4 = "RED";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 653ll;
	p1 = 32ll;
	p2 = 1230ll;
	p3 = 556ll;
	p4 = "BLUE";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
