{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Lemma 1. The algorithm produces lexicographically smallest answer.\
\
fact 1.\
We use BFS (Breadth first search), which means we search numbers with the same length, and then move on to number with 1 more digits.\
\
fact 2.\
At each iteration of BFS, we search from '0' to '9'.\
\
fact 3.\
We update our answer only if mem[i] is empty.\
=> We update our answer only once for each remainder.\
\
\
What we are looking for is mem[0].\
By fact 1 and 3, this is our first answer with mem[0].size() and no other number < mem[0].size() can produce remainder 0.\
By fact 2, this is lexicographically smallest among numbers with length men[0].size() and can produce reminder 0.\
\
Therefore, this is our answer.}