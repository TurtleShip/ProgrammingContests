#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define FOR(i,a,b) for(int i=a; i < b; i++)
#define FORE(i, a, b) for(int i=a; i <=b; i++)

typedef long long ll; 
 
class MultiplesWithLimit {
public:
	string minMultiples(int N, vector <int> forbiddenDigits);
};

string MultiplesWithLimit::minMultiples(int N, vector <int> forbidden){
    string digi = "0123456789";
	vector<string> best(N);
    vector<bool> forbid(10);
    queue<int> progress;
    progress.push(0);
    
    fill(best.begin(), best.end(), "");
    fill(forbid.begin(), forbid.end(), false);
    for(int i=0; i < forbidden.size(); i++)
        forbid[forbidden[i]] = true;
        
    while(!progress.empty())
    {
        int cur = progress.front();
        progress.pop();
        for(int i=0; i < 10; i++)
        {
            if(!forbid[i] && ( cur + i > 0))
            {
                ll nextNum = 10 * cur + i;
                int nextMod = nextNum % N;
             //   cout<<"cur : "<<cur<<endl;
          //      cout<<"nextNum : "<<nextNum<<endl;
            //    cout<<"nextMod : "<<nextMod<<endl;
                if(best[nextMod] == "")
                {
                    best[nextMod] = best[cur] + digi[i];
               //     cout<<"best[cur] : "<<best[cur]<<endl;
               //     cout<<"best[nextMod] : "<<best[nextMod]<<endl;
                    progress.push(nextMod);
                }
             //   cout<<endl;
            }
        }
    }
    
    string bestAns = best[0];
    if(bestAns == "")
        return "IMPOSSIBLE";
    
    int len = bestAns.size();
    stringstream ss;
    string temp;
    ss<<len;
    ss>>temp;
    
    if(len >= 9)
    {
        string ans ="";
        ans += bestAns.substr(0, 3);
        ans += "...";
        ans += bestAns.substr(len-3, len) + "(" + temp + " digits)";
        return ans;
    }
    
    return bestAns;
}
 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	MultiplesWithLimit *obj;
	string answer;
	obj = new MultiplesWithLimit();
	clock_t startTime = clock();
	answer = obj->minMultiples(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 8;
	int t1[] = {2,3,4,5,6,7,8,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "1000";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 9;
	int t1[] = {1,3,4,5,6,7,8,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "222...222(9 digits)";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 524;
	int t1[] = {5,2,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "3668";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10000;
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "IMPOSSIBLE";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1;
	int t1[] = {0,1,2,3,4,5,6,7,8,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "IMPOSSIBLE";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
