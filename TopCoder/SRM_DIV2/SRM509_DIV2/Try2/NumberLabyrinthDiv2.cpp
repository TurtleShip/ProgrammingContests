#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = 10000000;
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class NumberLabyrinthDiv2 {
public:
	int getMinimumNumberOfMoves(vector <string>, int, int, int, int, int);
};

/*
 Shortest path using BFS(breath first search)
 */

char toChar(int num)
{
    return char( int('0') + num);
}

int NumberLabyrinthDiv2::getMinimumNumberOfMoves(vector <string> board, int r1, int c1, int r2, int c2, int K) {
    
    int R = board.size();
    int C = board[0].size();
    
    int dist[R][C][K+1];
    
    for(int i=0; i < R; i++)
        for(int j=0; j <C; j++)
            for(int k=0; k <= K; k++)
                dist[i][j][k] = INF;
    
    int dr[4] = {1,-1,0,0};
    int dc[4] = {0,0,1,-1};
    
    dist[r1][c1][K] = 0;
    queue<int> Q;
    Q.push(r1); Q.push(c1); Q.push(K);
    
    while(!Q.empty())
    {
        int curR = Q.front(); Q.pop();
        int curC = Q.front(); Q.pop();
        int curK = Q.front(); Q.pop();
        
        if(curR == r2 && curC == c2)
            return dist[curR][curC][curK];
        
        bool hasDot = (board[curR][curC] == '.' && curK > 0);
        
        //try all possible and valid ways
        for(int i=0; i < 4; i++)
        {
            for(int j=1; j <= 9; j++)
            {
             
                if( !(hasDot || board[curR][curC] == toChar(j)) )
                    continue;
                
                int nR = curR + j*dr[i];
                int nC = curC + j*dc[i];
                int nK = (hasDot) ? (curK-1) : curK;
                
                if(0 <= nR && nR < R && 0 <= nC && nC < C && dist[nR][nC][nK] > (dist[curR][curC][curK] +1))
                {
                    dist[nR][nC][nK] = dist[curR][curC][curK] + 1;
                    Q.push(nR);
                    Q.push(nC);
                    Q.push(nK);
                }
            }
        }
        
    }
    
    return -1;
	
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, int p3, int p4, int p5, bool hasAnswer, int p6) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5;
	cout << "]" << endl;
	NumberLabyrinthDiv2 *obj;
	int answer;
	obj = new NumberLabyrinthDiv2();
	clock_t startTime = clock();
	answer = obj->getMinimumNumberOfMoves(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p6;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	
	{
	// ----- test 0 -----
	string t0[] = {"...2","....","3..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 0;
	p6 = -1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"...2","....","3..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 1;
	p6 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"...3","....","2..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 3;
	p6 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"55255",".0.0.","..9..","..3..","3.9.3","44.44"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 2;
	p3 = 4;
	p4 = 2;
	p5 = 10;
	p6 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"920909949","900020000","009019039","190299149","999990319","940229120","000409399","999119320","009939999"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	p2 = 3;
	p3 = 1;
	p4 = 1;
	p5 = 50;
	p6 = 10;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
