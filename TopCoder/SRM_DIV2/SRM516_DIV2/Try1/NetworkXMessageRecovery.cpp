#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define FOR(i,a,b) for(int i=a; i < b; i++)
#define FORE(i, a, b) for(int i=a; i <=b; i++)

typedef long long ll; 
 
class NetworkXMessageRecovery {
public:
	string recover(vector <string> messages);
};

bool sortString(string a, string b)
{
    if(a[0] < b[0]) return true;
    return false;
}

string NetworkXMessageRecovery::recover(vector <string> msg){
	string ans = "";
    int N = msg.size();
    int used = 0;
    
    while(used < N)
    {
        sort(msg.begin(), msg.end(), sortString);
        for(int i=0; i < N; i++)
        {
            if(msg[i].size() == 0) continue;
            char temp = msg[i][0];
            bool isValid = true;
            for(int j=0; j < N; j++)
            {
                if(i==j || msg[j].size() == 0) continue;
                for(int k=1; k < msg[j].size(); k++)
                {
                    if(temp == msg[j][k])
                    {
                        isValid = false;
                        break;
                    }
                }
                if(!isValid) break;
            }
            if(isValid)
            {
                ans += temp;
                //erase the new element out of msg
                for(int i=0; i < N; i++)
                {
                    if(msg[i].size() > 0 && msg[i][0] == temp)
                    {
                        msg[i].erase(0,1);
                        if(msg[i].size() == 0) used++;
                    }
                    
                }
                break;
            }
        }
        
    }
    return ans;
}
 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	NetworkXMessageRecovery *obj;
	string answer;
	obj = new NetworkXMessageRecovery();
	clock_t startTime = clock();
	answer = obj->recover(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"acd","bce"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "abcde";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"ed","dc","cb","ba"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "edcba";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"Fox","Ciel","FoxCiel"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "FoxCiel";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"a","A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Aa";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
