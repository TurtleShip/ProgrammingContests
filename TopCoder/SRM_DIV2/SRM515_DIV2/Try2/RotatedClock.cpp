#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class RotatedClock {
public:
	string getEarliest(int, int);
};

string RotatedClock::getEarliest(int hourHand, int minuteHand) {
	
    /*
     scale marked in 30 degree increments
     => 12 scales
     
     hourhand = full rotation in 12 hours
     = 360 deg in 12 * 60 min
     = 30 deg every 60 min
     = 0.5 deg every minute
     
     minuteehand = full roation in 1 hour
     = 360 deg in 60 min
     = 6 deg every minute
     
     Every minute, minutehand moves away from hourhand by 5.5 deg
     
     
     We know 0 <= HH <= 11 , 0 <= MM <= 59
     
     Hour = (hourhand / 30);
     Min = (minutehand /  5);
     */
    
    /*
     For each possible time, try every rotation 
     12 * 60 * 360 = 7200 * 360 = small enough
     Brute force, baby~!
     */
    
    for(int h = 0; h < 12; h++)
    {
        //degrees are measured in integers, yet both hands move smoothly.
        //So only possible explanation is that this girl measured time only
        //during even minutes. Because if she ever measures odd minutes
        //, we will have double for minutehand.
        for(int m = 0; m < 60; m+=2)
        {
            //actual hour degrees and minute degrees
            int realH = 30 * h + m * 0.5;
            int realM = 6 * m;
            
            /*
             Check how hands look like when the clock is rotated.
             Notice that in the problem statement,
             "She measured the angles of hands from a !!certain mark!!"
             So, even it is rotated, we know that is is rotated by multiples of 30.
             */
            for(int deg = 0; deg < 360; deg+=30)
            {
                int fakeH = (realH >= deg) ? (realH - deg) : (360 - (deg - realH));
                int fakeM = (realM >= deg) ? (realM - deg) : (360 - (deg - realM));
                /*
                if(realH < deg)
                    fakeH = 360 - (deg - realH);
                
                int fakeH = abs(realH - deg);
                int fakeM = abs(realM - deg);*/
                
               /* if( h == 8 && m == 20 && deg == 180)
                {
                    cout<<"realH : "<<realH<<" , realM : "<<realM<<endl;
                    cout<<"fakeH : "<<fakeH<<" , fakeM : "<<fakeM<<endl;
                }*/
                
                if(fakeH == hourHand && fakeM == minuteHand)
                {
                    stringstream ss1, ss2;
                    string HH,MM;
                    ss1<<h; 
                    ss2<<m;
                    ss1>>HH;
                    ss2>>MM;
                    
                    if(HH.length() == 1) HH = "0" + HH;
                    if(h == 0) HH = "00";
                    
                    if(MM.length() == 1) MM = "0" + MM;
                    if(m == 0) MM = "00";
                    
                    return (HH + ":" + MM);
                }
            }
            
        }
    }
    return "";
     
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	RotatedClock *obj;
	string answer;
	obj = new RotatedClock();
	clock_t startTime = clock();
	answer = obj->getEarliest(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 70;
	p1 = 300;
	p2 = "08:20";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 90;
	p1 = 120;
	p2 = "11:00";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 240;
	p1 = 36;
	p2 = "";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 19;
	p1 = 19;
	p2 = "";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1;
	p1 = 12;
	p2 = "00:02";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
