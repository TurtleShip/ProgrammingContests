#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class SmallBricks31 {
public:
	int countWays(int, int);
    int backtrack(int,int,int,int);
    int F(int,int);
};

int mem[11][1<<10];
int width;


int SmallBricks31::backtrack(int curH, int previousRow, int curW, int currentRow)
{
    //Base case. Current width == maximum allowed width
    //Now build another layer of bricks on top of currentRow.
    if(curW == width)
    {
        return F(curH-1, currentRow);
    }

    //empty brick
    ll res = backtrack(curH, previousRow, curW+1, currentRow);
    
    //check if previous row has a brick at (curW+1)
    bool b1 = (previousRow & (1<<curW));
    //Add 1x1 brick
    if(b1)
        res += backtrack(curH, previousRow, curW+1, (currentRow | (1<<curW)) );
    
    //check if previous row has a brick at (curW+2) 
    bool b2 = (previousRow & (1<<(curW+1)));
    //Add 1x2 brick
    if(b1 && b2)
        res += backtrack(curH, previousRow, curW+2, (currentRow | (1<<curW) | (1<<(curW+1))) );
    
    //check if previous row has a brick at (curW+3)
    bool b3 = (previousRow & ( 1<<(curW+2)));
    //add 1x3 brick
    if(b1 && b3)
        res += backtrack(curH, previousRow, curW+3, (currentRow | (1<<curW) | (1<<(curW+1)) | (1<<(curW+2))) );
    
    return (int)(res%1000000007);
}

/*
 previousRow = represents how previous row looks like it a bitmask form.
 curH = current Height.
 F, below function, returns how many ways you can build bricks 
 if current height is curH, previous row is previousRow, and width
 is width(global variable) 
 */
int SmallBricks31::F(int curH, int previousRow)
{
    int& res = mem[curH][previousRow];
    if(res == -1) //this simulation has never been stored
    {
        if(curH == 0) //base case
        {
            res = 1; //empty space
        }
        else
        {
            res = backtrack(curH, previousRow, 0, 0);
        }
    }
    return res;
    
}

int SmallBricks31::countWays(int w, int h) {
	//1 <= w,h <= 10
    width = w;
    memset(mem, -1, sizeof(mem));
    
    return F(h, (1<<w)-1);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	SmallBricks31 *obj;
	int answer;
	obj = new SmallBricks31();
	clock_t startTime = clock();
	answer = obj->countWays(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 3;
	p2 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 1;
	p2 = 13;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 2;
	p2 = 84;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 9;
	p2 = 132976888;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 5;
	p1 = 5;
	p2 = 11676046;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
