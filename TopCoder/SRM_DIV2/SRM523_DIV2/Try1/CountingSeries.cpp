#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define FOR(i,a,b) for(int i=a; i < b; i++)
#define FORE(i, a, b) for(int i=a; i <=b; i++)

typedef long long ll; 

class CountingSeries {
public:
	long long countThem(long long a, long long b, long long c, long long d, long long upperBound);
};

long long CountingSeries::countThem(long long a, long long b, long long c, long long d, long long upperBound){
    ll ans = 0;
    ll first = a;
    ll second = c;
    
    if(d == 1)
    {
        if( (( c == a) || (c > a && (c - a) % b == 0)) && c <= upperBound )
            ans++;
    }
    
    while( first <= upperBound && second <= upperBound && d != 1)
    {
        if( second > first)
        {
            ll diff = second - first;
            ll num = (ll)(diff / b);
            if( num == 0) first += b;
            else first += num * b;
        }
        else if( first > second)
        {
            second *= d;
            
        }
        
        if(first == second && first <= upperBound && second <= upperBound)
        {
            ans++;
            first += b;
            second *= d;
        }
    }
    
    ll firstNum = (upperBound - a) / b + 1;
    if(a > upperBound) firstNum = 0;
    ll secondNum = 0;
    second = c;
    while(second <= upperBound && d != 1)
    {
        secondNum++;
        second *= d;
    }
    if(d == 1)
    {
        if(c <= upperBound) secondNum++;
    }

	return (firstNum + secondNum - ans);
}
 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, long long p3, long long p4, bool hasAnswer, long long p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4;
	cout << "]" << endl;
	CountingSeries *obj;
	long long answer;
	obj = new CountingSeries();
	clock_t startTime = clock();
	answer = obj->countThem(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	long long p3;
	long long p4;
	long long p5;
	
	{
	// ----- test 0 -----
	p0 = 1ll;
	p1 = 1ll;
	p2 = 1ll;
	p3 = 2ll;
	p4 = 1000ll;
	p5 = 1000ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3ll;
	p1 = 3ll;
	p2 = 1ll;
	p3 = 2ll;
	p4 = 1000ll;
	p5 = 343ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 40ll;
	p1 = 77ll;
	p2 = 40ll;
	p3 = 100000ll;
	p4 = 40ll;
	p5 = 1ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 452ll;
	p1 = 24ll;
	p2 = 4ll;
	p3 = 5ll;
	p4 = 600ll;
	p5 = 10ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 234ll;
	p1 = 24ll;
	p2 = 377ll;
	p3 = 1ll;
	p4 = 10000ll;
	p5 = 408ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
