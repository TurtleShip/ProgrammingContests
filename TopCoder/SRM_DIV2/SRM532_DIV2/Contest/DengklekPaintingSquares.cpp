#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class DengklekPaintingSquares {
public:
	int numSolutions(int, int);
};

int mod = 1000000007;

/*
 1 <= N <= 100
 1 <= M <= 8
 
 800 pieces max.
 Bruteforce => 2^800  too big...

 Each sqaure can have at most 4 neighbors.
 
 dp[1][1] = 2;
 
 dp[2][1] 
 = dp[1][1] + 1 = 2 + 1 = 3;
 
 dp[3][1] 
 = dp[2][1] + 1 + 1 = 3 + 1 + 1 = 5;
 
 dp[4][1]
 = dp[3][1] + 1 + 1 = 5 + 1 + 1 = 7;
 
 dp[5][1]
 =dp[4][1] + 1 + 1 + 1 = 7 + 3 = 11;
 
 dp[1][2] = 2 + 2 = 4;
 
 dp[2][2] = dp[2][1] + dp[1][2] - dp[1][1] + 1  = 3 + 3 - 2 + 1 = 4 + 1 = 5
 
 where did 3 come from?
 


 
 */
int DengklekPaintingSquares::numSolutions(int N, int M) {
    
    ll dp[N+1][M+1];
    
    dp[1][1] = 2ll;
    for(int i=2; i <= N; i++)
    {
        dp[i][1] = dp[i-1][1] + 1 + (i-2)/2;
        if(i%2 == 1)
            dp[i][1]++;
    }
    
    for(int j=2; j <= M; j++)
    {
        dp[1][j] = dp[1][j-1] + 1 + (j-2)/2;
        if(j%2 == 1)
            dp[1][j]++;
    }
	
    for(int i=2; i <= N; i++)
    {
        for(int j=2; j <= M; j++)
        {
            if(i==2 && j ==2)
            {
                dp[2][2] = 8ll;
                continue;
            }
            dp[i][j] = ( dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + 1ll ) % mod;
            
            
            
        }
    }
    
    return dp[N][M];
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	DengklekPaintingSquares *obj;
	int answer;
	obj = new DengklekPaintingSquares();
	clock_t startTime = clock();
	answer = obj->numSolutions(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	p2 = 8;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 3;
	p2 = 5;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 47;
	p1 = 7;
	p2 = 944149920;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
