#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class SkewedPerspectives {
public:
	vector <string> areTheyPossible(vector <int>, int, int, vector <string>);
};

vector <string> SkewedPerspectives::areTheyPossible(vector <int> cubes, int B, int w, vector <string> views) {
	
    vector<string> ans;
    for(int v=0; v < views.size(); v++)
    {
        //basic test
        if( (views[v].size() == 1 && views[v][0] == 'b') || (views[v].size() > 1 && views[v][0] == 'b' && views[v][1] != 'b') )
        {
            ans.push_back("invalid");
            continue;
        }
        
        string curView = 'x' + views[v];
        vector<int> curCubes = cubes;
        vector<int> extra;
        bool valid = true;
        int curB = B;
        
        int h = curView.size() - 1;
        
        
        while(h >= 1)
        {
            if(curView[h] != 'b')
            {
                curCubes[ curView[h] - '0' ]--;
                h--;
            }
            else
            {
                int low = h;
                while(curView[low] == 'b')
                    low--;
                int oldH = h;
                h = low;
                
                if( (oldH-low) % 2 == 0)
                {
                    curB -= (oldH-low)/2;
                }
                else
                {
                    curB -= (oldH - low + 1) / 2;
                    
                    if(low == 0) extra.push_back(1);
                    else extra.push_back(low-1);
                }
            }  
        }
        
        int ones = 0;
        for(int i=0; i < curCubes.size(); i++)
        {
            if(curCubes[i] < 0)
            {
                valid = false;
                break;
            }
            ones += curCubes[i];
        }
        
        if(!valid || curB < 0 || (extra.size() + 1) > w)
        {
            ans.push_back("invalid");
            continue;
        }
        
        for(int i=0; i < extra.size(); i++)
        {
            while( curB > 0 && (extra[i] - 2 >= 0) )
            {
                curB--;
                extra[i]-=2;
                
            }
            
            while( ones > 0 && (extra[i] - 1 >= 0) )
            {
                ones--;
                extra[i]--;
            }
            
            if(extra[i] > 0)
            {
                valid = false;
                ans.push_back("invalid");
                break;
            }
        }
        
        if(valid)
            ans.push_back("valid");
    }
    return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, vector <string> p3, bool hasAnswer, vector <string> p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1 << "," << p2 << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p3[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SkewedPerspectives *obj;
	vector <string> answer;
	obj = new SkewedPerspectives();
	clock_t startTime = clock();
	answer = obj->areTheyPossible(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p4.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p4[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p4.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p4[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	vector <string> p3;
	vector <string> p4;
	
	{
	// ----- test 0 -----
	int t0[] = {1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 2;
	string t3[] = {"012","012bb","bb0","21bb","21b","1bb20"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"valid","valid","valid","valid","valid","valid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,1,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 2;
	string t3[] = {"b","bb","bbb","bbbb","bbbbb","bbbbbb","1","1b","1bb","1bbb","1bbbb","1bbbbb","1bbbbbb","b1","b1b","b1bb","b1bbb","b1bbbb","b1bbbbb","bb1","bb1b","bb1bb","bb1bbb","bb1bbbb","bbb1","bbb1b","bbb1bb","bbb1bbb","bbbb1","bbbb1b","bbbb1bb","bbbbb1","bbbbb1b","bbbbbb1"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"invalid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","valid","invalid","invalid","invalid","invalid","invalid","invalid","valid","valid","valid","invalid","valid","invalid","invalid","invalid","invalid","valid","invalid","valid","invalid","invalid","valid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {100,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 20;
	p2 = 3;
	string t3[] = {"00000000000000000000000000000000000000000000000000","00000000000000000000000000000000000b00000000000000","0000000000000000000000000000000000000000000000000b","bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0000000000000"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"valid","valid","valid","valid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {5,6,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 1;
	string t3[] = {"00000111111222","0000111111222","0000011111222","000001111111222","0000011111122","b"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"valid","valid","valid","invalid","valid","invalid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {100,100,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 50;
	string t3[] = {"2","bb1b012012012012012012012","bb1b012012012012012012012b","bb1b012012012b012b012b012012b","bb1b0b1b2b0b1b2b0b1b2bb012b012b012012b","b1b0b1b2b0b1b2b0b1b2bb012b012b012012b","bbb1b012012012012012012012"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"valid","valid","valid","valid","valid","invalid","valid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 1;
	string t3[] = {"0","bb"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"invalid","invalid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	int t0[] = {3,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 3;
	string t3[] = {"00b0b","bbbbbbbb","000b"};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	string t4[] = {"invalid","valid","valid"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
