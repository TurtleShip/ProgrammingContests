#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define FOR(i,a,b) for(int i=a; i < b; i++)
#define FORE(i, a, b) for(int i=a; i <=b; i++)

typedef long long ll; 
 
class StonesGame {
public:
	string winner(int N, int M, int K, int L);
};

string StonesGame::winner(int N, int M, int K, int L){
	string romeo = "Romeo";
    string draw = "Draw";
    string str = "Strangelet";
    
    /*Let p = first position of K
      Then when m is in [p, p + (k-1)], m swaps with m' = p + (p + k - 1 - m)
     Now, available p are in [max(1, m - (k-1)), min(m, n - (k-1))]
     Assume p is in [p1, p2]
     Then m can move anywhere between [m1, m2] = [p1 + p1 + k -1 - m, p2 + p2 + k -1 - m]
     where m' % 2  == m1 % 2
     So if L is one of m', remeo wins.
     
     Assume L is not one of m'.
     Then romeo will move m somewhere between [m1 , m2] inclusive.
     Then str has to move m' to L in order to win.
     We need to find range [l1, l2] where L can be reached from  
     because if( (l1 <= m1) && (l2 >= m2) && L % 2 == m1 % 2 ) m' can be moved to L.
     Note that the range where L can be moved from is the same as 
     the range where L can move to. (ex> if L can move anywhere [2,10], then only from that
     range we can reach back to L.
     So using the previous formula,
     [l1,l2] = [max(1,L-(k-1)) * 2 + K - 1 - m, min(L,n-(k-1))*2 + k - 1 -m]
     If the above condtiions are met, str wins.
     
     Else draw */
    int m1 = max(1,M-(K-1))*2 + K - 1 - M;
    int m2 = min(M,N-(K-1))*2 + K - 1 - M;
    int l1 = max(1,L-(K-1))*2 + K - 1 - L;
    int l2 = min(L,N-(K-1))*2 + K - 1 - L;
    if(m1 <= L && m2 >= L && m1 % 2 == L % 2 ) return romeo;
    if(l1 <= m1 && l2 >= m2 && m1 % 2 == l1 % 2) return str;
    return draw;
     
}
 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, string p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	StonesGame *obj;
	string answer;
	obj = new StonesGame();
	clock_t startTime = clock();
	answer = obj->winner(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p4 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	string p4;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 1;
	p2 = 1;
	p3 = 2;
	p4 = "Draw";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5;
	p1 = 1;
	p2 = 2;
	p3 = 2;
	p4 = "Romeo";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 5;
	p2 = 2;
	p3 = 3;
	p4 = "Strangelet";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	p1 = 5;
	p2 = 2;
	p3 = 2;
	p4 = "Draw";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1000000;
	p1 = 804588;
	p2 = 705444;
	p3 = 292263;
	p4 = "Romeo";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1000000;
	p1 = 100000;
	p2 = 500000;
	p3 = 600000;
	p4 = "Strangelet";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
