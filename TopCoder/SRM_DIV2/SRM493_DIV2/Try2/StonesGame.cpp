#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class StonesGame {
public:
	string winner(int, int, int, int);
};

bool canWin(int,int,int,int);

string StonesGame::winner(int N, int M, int K, int L) {
    string ro = "Romeo";
    string let = "Strangelet";
    string draw = "Draw";
    
	if(K==1) return draw;
    
    //cases where romeo always wins
    if(canWin(N,M,K,L)) return ro;
    
    /*
     Romeo can't win. Stranglet might win
     If Stranglet can put white stone to Lth stone after Romeo's first move,
     he wins. Otherwise, it's a draw.
     */

    int minLoc = M - (K - 1);
    int maxLoc = M + (K - 1);
    int curStart = minLoc;
    int curEnd = M;
    
    for(int idx = minLoc; curEnd <= N && idx <= maxLoc; idx +=2, curStart+=1, curEnd+=1)
    {
        if(curStart < 1) continue;
        if(!canWin(N,idx,K,L)) return draw;
    }

    return let;
}

bool canWin(int N, int M, int K, int L)
{
    if(K%2 == 0 && (L%2 != M%2) && (abs(M-L) <= K))
    {
        int s = min(M,L);
        int t = max(M,L);
        int extra = ( K - (t - s + 1))/2;
        if( 1 <= (s - extra) && (t + extra) <= N)
            return true;
    }
    
    if(K%2 == 1 && (L%2 == M%2) && (abs(M-L) <= K))
    {
        int s = min(M,L);
        int t = max(M,L);
        int extra = (K - (t-s+1))/2;
        if( 1 <= (s - extra) && (t + extra) <= N)
            return true;
    }
    return false;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, string p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	StonesGame *obj;
	string answer;
	obj = new StonesGame();
	clock_t startTime = clock();
	answer = obj->winner(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p4 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	string p4;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 1;
	p2 = 1;
	p3 = 2;
	p4 = "Draw";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5;
	p1 = 1;
	p2 = 2;
	p3 = 2;
	p4 = "Romeo";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5;
	p1 = 5;
	p2 = 2;
	p3 = 3;
	p4 = "Strangelet";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	p1 = 5;
	p2 = 2;
	p3 = 2;
	p4 = "Draw";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1000000;
	p1 = 804588;
	p2 = 705444;
	p3 = 292263;
	p4 = "Romeo";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1000000;
	p1 = 100000;
	p2 = 500000;
	p3 = 600000;
	p4 = "Strangelet";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
