#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class TheLuckyGameDivTwo {
public:
	int find(int, int, int, int);
};

vector<int> luckyNum;

void fillLucky(int num)
{
    if(num <= 4747)    
    {
        luckyNum.push_back(num);
        fillLucky(num*10 + 4);
        fillLucky(num*10 + 7);
    }
}

/*
 At first sight, it seems like what John chooses matters.
 However, outcome totally depends on what Brus does.
 See test case 2) for clarification.
 So what we need to do is give Brus every range that
 John can give him, and then see what value his "minimum" approach
 produces.
 Let N = difference between b and a.
 Then this will take about O(N * N * N), which is about 1,000,000,000
 This is a large number,
 but if you factor in constriants, you can see that
 actual computation will be a lot smaller than 10^9
 */


int TheLuckyGameDivTwo::find(int a, int b, int jLen, int bLen) {
	
    fillLucky(0);
    int N =luckyNum.size();

    int res = 0;
    for(int i=a; i <= (b-jLen + 1); i++)
    {
        int maxA = i;
        int maxB = i + jLen - 1;
        
        int minChoice = N;
        for(int j=maxA; j <= (maxB - bLen + 1); j++)
        {
            int cur = 0;
            for(int k=0; k < N; k++)
                if(j <= luckyNum[k] && luckyNum[k] < (j + bLen))
                    cur++;
            minChoice = min(minChoice, cur);
        }
        res = max(res, minChoice);        
    }
    
    return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	TheLuckyGameDivTwo *obj;
	int answer;
	obj = new TheLuckyGameDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 10;
	p2 = 2;
	p3 = 1;
	p4 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 100;
	p2 = 100;
	p3 = 100;
	p4 = 6;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 8;
	p2 = 3;
	p3 = 2;
	p4 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1;
	p1 = 100;
	p2 = 75;
	p3 = 50;
	p4 = 2;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
