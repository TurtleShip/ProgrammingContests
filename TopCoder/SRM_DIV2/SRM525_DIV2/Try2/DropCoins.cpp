#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class DropCoins {
public:
	int getMinimum(vector <string>, int);
};

int DropCoins::getMinimum(vector <string> board, int K) {
	int R = board.size();
    int C = board[0].size();

    //coins[r][c] = number of coins from (0,0) to (r,c) inclusive.
    int coins[R][C];
    
    //base cases
    coins[0][0] = (board[0][0] == 'o') ? 1 : 0;
    
    REP(i,1,R)
        coins[i][0] = coins[i-1][0] + ((board[i][0] == 'o') ? 1 : 0); 
    
    REP(i,1,C)
        coins[0][i] = coins[0][i-1] + ((board[0][i] == 'o') ? 1 : 0);

    REP(i,1,R)
    REP(j,1,C)
        coins[i][j] = coins[i-1][j] + coins[i][j-1] - coins[i-1][j-1] + ((board[i][j] == 'o') ? 1 : 0);

    /*
     We need to find a rectangle with start point (sr, sc) and end point (er,ec)
     Number of coins from (sr,sc) to (er,ec) inclusive
     = K.
     */
    int best = INF;
    REP(sr,0,R)
    REP(sc,0,C)
        REP(er,sr,R)
        REP(ec,sc,C)
        {
            int up = (sr > 0) ? coins[sr-1][ec] : 0;
            int left = (sc > 0) ? coins[er][sc-1] : 0;
            int upleft = (sr > 0 && sc > 0) ? coins[sr-1][sc-1] : 0;
            if( (coins[er][ec] - up - left + upleft) == K )
            {
                int vert = 2 * min(sr, R - er - 1) + max(sr, R - er - 1);
                int hori = 2 * min(sc, C - ec - 1) + max(sc, C - ec - 1);
                best = min(best, vert + hori);
            }
        }
    
    if(best == INF) return -1;
    return best;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	DropCoins *obj;
	int answer;
	obj = new DropCoins();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {".o..","oooo","..o."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {".....o","......","oooooo","oooooo","......","o....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"....",".oo.",".oo.","...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".......","..ooo..","ooooooo",".oo.oo.","oo...oo"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	p2 = 4;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".................",".ooooooo...oooo..",".ooooooo..oooooo.",".oo.......oo..oo.",".oo.......oo..oo.",".ooooo.....oooo..",".ooooooo...oooo..",".....ooo..oo..oo.","......oo..oo..oo.",".ooooooo..oooooo.",".oooooo....oooo..","................."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 58;
	p2 = 6;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
