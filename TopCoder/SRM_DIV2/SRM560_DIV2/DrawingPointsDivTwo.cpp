#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class DrawingPointsDivTwo {
public:
	int maxSteps(vector <string>);
};
bool isDot[20+25][20+25];

int DrawingPointsDivTwo::maxSteps(vector <string> points) {
	int width = points[0].size();
    int height = points.size();
    
    memset(isDot, false, sizeof(isDot));
    
    // the final step, or k = 0
    for(int x=0; x < width; x++)
        for(int y=0 ; y < height; y++)
            isDot[y][x] = (points[y][x] == '*');

    // try every value of k
    for(int k=1; k <= 21; k++) {
        
        // we are simulating dots based on previous =  (k-1)th step
        for(int x = (width + k) - 1 ; x >= 0; x--) { // -1 is needed because x starts at 0
            for(int y = (height + k) -1; y >= 0; y--) {
                if( (x>0 && isDot[y][x-1]) || (y>0 && isDot[y-1][x]) || (x>0 && y>0 && isDot[y-1][x-1]) ) isDot[y][x] = true;
            }
        }
        
        // check if the current k by k square is consistent with the final step
        for(int x=0; x < width; x++) {
            for(int y=0; y < height; y++) {
                bool isSquare = true;
                
                for(int curX = x; curX <= x + k; curX++)
                    for(int curY = y; curY <= y + k; curY++)
                        isSquare &= isDot[curY][curX];
                
                // we found a conflict at (k)th step
                // so (k-1)th step was the largest possible step
                if( isSquare && points[y][x] != '*') return k-1;
            }
        }
    }
    
    return -1;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DrawingPointsDivTwo *obj;
	int answer;
	obj = new DrawingPointsDivTwo();
	clock_t startTime = clock();
	answer = obj->maxSteps(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"*..*"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"...",".*."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"*.*"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"..*.","*...","...*"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"....................","..........*.........","....................",".........*..........","....................","....................","....................","....................","....................","....................","....................","....................",".*..................","....................","*.............**....","....................","....................","................*...","....................","...................."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 11;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
