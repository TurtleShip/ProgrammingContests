#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class FiveHundredEleven {
public:
	string theWinner(vector <int>);
};

/*
 Ciel plays first.
 If a player can't make a move, or if after a player's move the memory
 becomes 511, this player loses.
 
 Assuming memory 511 reach at some point during the match,
 optimal approach will be 
 #1. Avoid stepping on 511
 #2. Force the other player step on it.
 
 Doing #1 is easy : see all available options, and avoid stepping on it.
 
 #2 is tricky.
 One way to do this is to flip as many bits from 0 to 1 as possible.
 */
string FiveHundredEleven::theWinner(vector <int> cards) {
	int N = cards.size();
    string fox = "Fox Ciel";
    string toast = "Toastman";
    
    int mem = 0;
    bool hasOdd = false;
    for(int i=0; i < N; i++)
    {
        mem |= cards[i];
        if(cards[i] % 2 == 1) hasOdd = true;
    }
    
    if(mem < 511 || !hasOdd)
    {
        if(N%2 == 0) return toast;
        else return fox;
    }
    else //at some point, memory will reach 511, or go over it. Let's find out the winner.
    {
        bool taken[N];
        memset(taken, false, sizeof(taken));
        mem = 0;
        for(int count = 0; count < N; count++)
        {
            int maxResult = -1;
            int choice = -1;
            for(int i=0; i < N; i++)
            {
                if(taken[i]) continue;
                int temp = (mem | cards[i]);
                if(temp != 511 && temp > maxResult)
                {
                    maxResult = temp;
                    choice = i;
                }
            }
            if(choice == -1)
                return (count%2==0) ? toast : fox;
            
            taken[choice] = true;
            mem = maxResult;
        }
    }
    
    //Game ended without reaching 511.
    return (N%2 == 0) ? toast : fox; 
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	FiveHundredEleven *obj;
	string answer;
	obj = new FiveHundredEleven();
	clock_t startTime = clock();
	answer = obj->theWinner(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	string p1;
	
	{
	// ----- test 0 -----
	int t0[] = {3,5,7,9,510};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Fox Ciel";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Toastman";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {511};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Toastman";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {5,58,192,256};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Fox Ciel";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
