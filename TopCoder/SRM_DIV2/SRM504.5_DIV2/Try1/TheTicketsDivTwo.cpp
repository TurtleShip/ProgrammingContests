#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class TheTicketsDivTwo {
public:
	double find(int, int, int);
};


/*
 dp[i][j][k] 
 = possibility of (j)th friend getting picked after k throws 
 when there are i friends total.
 
 For j < i : dp = -1 : impossible case
 dp[1][1][0] = 1
 dp[i][j][0] = 0 for if (i != 1 && j != 1)
 
 dp[i][1][1] = 1/6 for all i > 1

 dp[2][1][1] = 1/6
 dp[2][2][1] = 1 - dp[2][1][1] = 5/6
 
 If j == k : dp = (1/2)^(j-1) * 1/6
 dp[2][2][2] = 1/2 * 1/6
 
 
 dp[2][1][2] = 1/2 * (1/2 + 1/3) = 5/12
 
 
 Notice that either line gets shortened at most by 1.
 If j > k, dp = -1
 */
double dp[11][11][11];

double rec(int n, int m, int k)
{
    double& res = dp[n][m][k];
    if(res != -1.0) return res;

    res = 0.0;

    if(n == 1)
    {
        res = 1.0;
    }
    else if(k == 0)
    {
        if(m == 1)
        {
            res = 1.0;
        }
    }
    else
    {
        if(m == 1)
        {
            res = (1.0/6.0) + (0.5) * rec(n, n, k-1);
        }
        else
        {
            res = (0.5) * rec(n, m-1, k-1) + (1.0/3.0) * rec(n-1, m-1, k-1);
        }
    }
    return res;
}
double TheTicketsDivTwo::find(int n, int m, int k) {
	
    /*
     Only one friend : choose him.
     Otherwise, throw a die.
     4 : choose the friend currently first in line.
     odd number : the first go to the last
     even : the first leave permanently
     
     Gets tired after k throws.
     
     Return the probability that the m-th friend in the initial line
     is ultimately chosen by John.
     
     1 <= m <= n <= 10
     1 <= k <= 10
     
     Prob of getting 4 : 1/6
     Prob of getting odd : 1/2
     Prob of getting even : 1/3
     
     How about calculating probability of m getting picked
     after i throws, where 1 < i <= k
     
     */
    for(int i=0; i <= n; i++)
        for(int j=0; j <= n; j++)
            for(int a=0; a <=k; a++)
                dp[i][j][a] = (-1.0);
    
    return rec(n,m,k);
    
    
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	TheTicketsDivTwo *obj;
	double answer;
	obj = new TheTicketsDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	double p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 1;
	p2 = 1;
	p3 = 0.16666666666666666;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 1;
	p2 = 2;
	p3 = 0.5833333333333334;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 7;
	p1 = 7;
	p2 = 4;
	p3 = 0.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 2;
	p2 = 10;
	p3 = 0.25264033564814814;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
