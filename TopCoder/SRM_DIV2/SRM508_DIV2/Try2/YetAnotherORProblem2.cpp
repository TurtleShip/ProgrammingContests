#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class YetAnotherORProblem2 {
public:
	int countSequences(int, int);
};


ll mem[15][11];
int N;
int R;
int mod = 1000000009;

ll rec(int col, int numEqualRows)
{
    ll& res = mem[col][numEqualRows];
    
    if(res != -1) return res;

    if(col == 0)
    {
        res = 1;
    }
    else
    {
        res = 0;
        bool isZero = ( (R & (1<<(col-1))) == 0);
        if(numEqualRows == N)
        {
            if(isZero)
                res = rec(col-1, numEqualRows) % mod;
            else
            {
                res = rec(col-1, 0);
                res += N * rec(col-1, 1);
            }
        }
        if(numEqualRows == 1)
        {
            if(isZero) res = rec(col-1, 1) + (N-1) * rec(col-1, 1);
            else res = rec(col-1, 1) + rec(col-1, 0) + (N-1) * rec(col-1, 0);
        }
        
        if(numEqualRows == 0)
        {
            res = rec(col-1, 0);
            res += N * rec(col-1, 0);
        }
    }
    res %= mod; 
    return res;
}


int YetAnotherORProblem2::countSequences(int _N, int _R) {
	
    N = _N;
    R = _R;
    memset(mem, -1, sizeof(mem));
    
    return rec(14, N);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	YetAnotherORProblem2 *obj;
	int answer;
	obj = new YetAnotherORProblem2();
	clock_t startTime = clock();
	answer = obj->countSequences(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 7;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 3;
	p2 = 9;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 3;
	p2 = 16;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 7;
	p1 = 1023;
	p2 = 73741815;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
