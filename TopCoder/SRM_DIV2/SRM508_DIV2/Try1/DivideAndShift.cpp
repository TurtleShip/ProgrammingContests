#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;

//return true is num is a prime
bool isPrime(int num)
{
    //num must be bigger than 1
    if(num <= 1) return false;
    int cap = (int)sqrt(num);
    for(int i=2; i <= cap; i++)
        if(num % i == 0) return false;
    return true;
}

//find number of primes that is a divisor of num
//ex> 8 = 2 * 2 * 2 => return 3
int NumOfPrimesDiv(int num)
{
    if(num <= 1) return 0;
    //num is at least 2
    int ans = 0;
    while(num != 1)
    {
        if(num % 2 == 0)
        {
            ans++;
            num /= 2;
            continue;
        }
        for(int i=3; i <= num; i+=2)
            if(isPrime(i) && num % i == 0)
            {
                ans++;
                num /= i;
                break;
            }
    }
    return ans;
}

class DivideAndShift {
public:
	int getLeast(int N, int M);
};

int DivideAndShift::getLeast(int N, int M){
	if(M == 1) return 0;
    if(isPrime(N) || N == M || M == 2) return 1;
    vector<int> divs; //divisors of N
    int cap = (int)sqrt((double)N);
    for(int i=1; i <= cap; i++)
    {
        if(N % i == 0)
        {
            divs.push_back(i);
            if(i != N/i)
                divs.push_back(N/i);
        }
    }
    vector<int> ans;
    //Try every possible divisor.
    for(int i=0; i < divs.size(); i++)
    {
        int cost = 0;
        //cost to divide N into (N/divs[i]) segments.
        int primeCost = NumOfPrimesDiv(divs[i]);
      
        //cost to shift numbers after division is done.
        int shiftCost = min((M-1) % (N/divs[i]), (N/divs[i]) - (M-1)%(N/divs[i]));
       
        cost = primeCost + shiftCost;
        ans.push_back(cost);
    }
    
    sort(ans.begin(), ans.end());
    return ans[0];
}
 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	DivideAndShift *obj;
	int answer;
	obj = new DivideAndShift();
	clock_t startTime = clock();
	answer = obj->getLeast(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 56;
	p1 = 14;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 49;
	p1 = 5;
	p2 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 256;
	p1 = 7;
	p2 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 6;
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 77777;
	p1 = 11111;
	p2 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
