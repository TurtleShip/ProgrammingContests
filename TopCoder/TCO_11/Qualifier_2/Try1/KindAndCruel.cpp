#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)

typedef long long ll;
 
class KindAndCruel {
public:
	int crossTheField(string, int, int);
};

int INF = numeric_limits<int>::max();
const int maxPos = 50 + 10;
const int maxWait = 50 * 50 + 10;

/*
 total[i][j] = minimum number of time taken to go from position 0 to i 
 if we arrived at position i at time (A*M + j) where A is a non-negative integer
 and M = C*K
 */
int total[maxPos][maxWait];
queue<int> Q;
void add(int,int,int);

int KindAndCruel::crossTheField(string field, int K, int C) {
    
    int N = field.size();
    int M = K*C;
    REP(i,0,N)
    REP(j,0,M)
    total[i][j] = INF;
    
    add(0,0,0); //we start by arriving at position 0 at time 0, thus total time = 0
    while(!Q.empty())
    {
        int curPos = Q.front(); Q.pop();
        int curTime = Q.front(); Q.pop();
        
        //either stay at the current position, or move forward
        for(int i=0; i <= 1; i++)
        {
            int nextPos = curPos + i;
            if(nextPos >= N) continue; //reached the end. Done
            if(field[nextPos] == 'K' && (curTime+1)%K == 0) continue; //kind creature in bad mood
            if(field[nextPos] == 'C' && (curTime+1)%C != 0) continue; //cruel create not in good mood
            add(nextPos, ((curTime+1) % M), total[curPos][curTime]+1);
        }
    }
    
    int ans = INF;
    REP(i,0,M)
    ans = min(ans, total[N-1][i]);
    if(ans == INF) return -1;
    return ans;
    
}

void add(int curPos, int curTime, int totalTime)
{
    if(total[curPos][curTime] == INF)
    {
        total[curPos][curTime] = totalTime;
        Q.push(curPos); Q.push(curTime);
    }
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1 << "," << p2;
	cout << "]" << endl;
	KindAndCruel *obj;
	int answer;
	obj = new KindAndCruel();
	clock_t startTime = clock();
	answer = obj->crossTheField(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = "...";
	p1 = 2;
	p2 = 5;
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = ".K.C.";
	p1 = 3;
	p2 = 4;
	p3 = 5;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = ".CCCC.";
	p1 = 3;
	p2 = 5;
	p3 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = ".CKKKKCKKKKC.KKKKCKKKKC.CKKKKCKKKKCKKKKCKKKKCKKKK.";
	p1 = 5;
	p2 = 5;
	p3 = 60;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
