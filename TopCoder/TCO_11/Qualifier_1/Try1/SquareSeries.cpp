#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class SquareSeries {
public:
	string completeIt(string, int);
};

const int maxLen = 200;
const int maxSz = 150;
string pat;
int lastLen;
int N;
int rightStart;

string mem[maxLen+1][maxSz+1][50];
bool seen[maxLen+1][maxSz+1][50];
string rec(int,int,char);
string better(string, string);

string SquareSeries::completeIt(string pattern, int lastLength) {
	
    lastLen = lastLength;
    
    int j=0;
    while(pattern[j] != '?')
        j++;
    
    string left = pattern.substr(0, j);
    string right = pattern.substr(j+1);
    
    int quesLen = maxLen - left.size() - right.size();
    
    rightStart = j + quesLen;
    
    pat = left + string(quesLen, '?') + right;
    N = pat.size();
    memset(seen, false, sizeof(seen));
    
    return rec(0, 0, 'C');
}

string rec(int pos, int prevSz, char prevCh)
{
   
    string& str = mem[pos][prevSz][prevCh - 'A'];
    
    if(seen[pos][prevSz][prevCh - 'A'])
        return str;
   
    seen[pos][prevSz][prevCh - 'A'] = true;
    
    str = "...";
    
    if(pos == N)
    {
        if(prevSz == lastLen) str = "";
        return str;
    }
    
    bool useB = false, useW = false;
    
    if(pat[pos] != '?')
    {
        //no choice but to follow the current pattern
        useB = (pat[pos] == 'B');
        useW = !useB;
    }
    else //pat[pos] == '?'
    {
        useB = useW = true;
        
        //go to the right start
        str = rec(rightStart, prevSz, prevCh);
    }
    
    char choice[2] = {'B','W'};
    
    for(int i=0; i < 2; i++)
    {
        if( (i==0 && !useB) || (i==1 && !useW) )
            continue;
        
        int sz = prevSz + ((prevCh != choice[i]) ? 1 : -1);
      
        if(sz == 0 || sz > maxSz)
            continue;
        
        string cur = rec(pos+1, sz, choice[i]);
        if(cur != "...")
            str = better(str, choice[i] + cur);
    }
    
    return str;
}

string better(string a, string b)
{
    if(a == "...") return b;
    if(b == "...") return a;
    
    if(a.size() != b.size())
    {
        if(a.size() < b.size()) return a;
        else return b;
    }
    
    if(a < b) return a;
    return b;
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	SquareSeries *obj;
	string answer;
	obj = new SquareSeries();
	clock_t startTime = clock();
	answer = obj->completeIt(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "W?B";
	p1 = 2;
	p2 = "WB";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "?";
	p1 = 5;
	p2 = "BWBWB";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "BWBBBBW?WB";
	p1 = 10;
	p2 = "...";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "BWBWBW?WBWBWBW";
	p1 = 15;
	p2 = "BWBWBWBBWBWBWBWBW";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "WBWBWBWBWBWWBB?W";
	p1 = 1;
	p2 = "WBWBWBWBWBWWBBBBBBBBBBBWW";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "?WBWBWBBB";
	p1 = 3;
	p2 = "...";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
