#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class Palindromize3 {
public:
	string getPalindrome(string);
};

/*
 1. Less key press
 2. Smaller 
 */
string ans;
int opt;
void find(int,int,string,set<char>);

string Palindromize3::getPalindrome(string s) {
	
    ans ="";
    set<char>emp;
    find(0, s.size()-1, s, emp);
    
    return ans;
}

void find(int i, int j, string cur, set<char> press)
{
    if(i >= j)
    {
        if(ans == "" || (press.size() < opt) || (press.size() == opt && cur < ans))
        {
            opt = press.size();
            ans = cur;
        }
        return;
    }
    
    if(cur[i] != cur[j])
    {
        string next = cur;
        next[i] = next[j] = cur[i];
        set<char> next1 = press;
        next1.insert(cur[i]);
        find(i+1, j-1, next, next1);
        
        next[i] = next[j] = cur[j];
        set<char> next2 = press;
        next2.insert(cur[j]);
        find(i+1, j-1, next, next2);
    }
    else
        find(i+1, j-1, cur, press);
    
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	Palindromize3 *obj;
	string answer;
	obj = new Palindromize3();
	clock_t startTime = clock();
	answer = obj->getPalindrome(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = "aszsbsz";
	p1 = "zszszsz";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ababab";
	p1 = "aaaaaa";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "topcoderopen";
	p1 = "nepooeeoopen";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "dfiuwifuqwieubaoiewhroiahw";
	p1 = "wfiiwifueiieuueiieufiwiifw";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
