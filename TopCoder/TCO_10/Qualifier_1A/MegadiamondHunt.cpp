#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class MegadiamondHunt {
public:
	int getValue(string);
};

/*
 If there is a megadiamond, it is optimal to take it as it is.
 If there are multiple diamonds, try removing smallest diamonds first.
 */
int ans;
void findSmallest(string);

int MegadiamondHunt::getValue(string mine) {
	ans = 0;
    findSmallest(mine);
    return ans;
}

void findSmallest(string cur)
{
    int N = cur.size();
    int pos = -1, sz = 100;
    for(int i=1; i < N; i++)
    {
        if(cur[i-1] == '<' && cur[i] == '>')
        {
            int curPos = i-1;
            int curSz = 0;
            int s = i-1, t = i;
            while(0 <= s && cur[s] == '<' && t < N && cur[t] == '>')
            {
                curPos = s;
                curSz++;
                s--;
                t++;
            }
            if(curSz < sz)
            {
                pos = curPos;
                sz = curSz;
            }
        }
    }
    
    //No more diamonds
    if(pos == -1) return;
    
    ans += sz * sz;
    findSmallest(cur.substr(0, pos) + cur.substr(pos+sz*2));
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	MegadiamondHunt *obj;
	int answer;
	obj = new MegadiamondHunt();
	clock_t startTime = clock();
	answer = obj->getValue(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "><<><>>><";
	p1 = 5;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "<<><<>><<>>>";
	p1 = 14;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = ">>>>>><<<<<<<";
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "<<<<<<><><><<<<>>><><><<>><<<><<>><<<>>><<<<<>>>>>";
	p1 = 57;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
