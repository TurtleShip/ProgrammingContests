#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class TwoRegisters {
public:
	string minProg(int);
};

int numOfOps(int,int);
string rebuild(int,int);

string TwoRegisters::minProg(int r) {
    
    
    vector<int> bestY;
    int opt = INF;
    
    for(int y=1; y < r; y++)
    {
        int cur = numOfOps(r,y);
        if( cur < opt )
        {
            bestY = vector<int>(1,y);
            opt = cur;
        }
        else if(cur == opt)
            bestY.push_back(y);
    }

    string res = "z";
    for(int i=0; i < bestY.size(); i++)
    {
        string cur = rebuild(r,bestY[i]);
        res = min(res, cur);
    }
    
    if(res == "z") return "";
    return res;
}

int numOfOps(int x, int y)
{
    int res = 0;
    while(x > 0 && y > 0)
    {
        if(x < y)
        {
            res += y / x;
            y %= x;
        }
        else if(y < x)
        {
            res += x / y;
            x %= y;
        }
        else return INF;
    }
    
    if( (x+y) != 1 ) return INF;
    return res - 1;
}

string rebuild(int x, int y)
{
    string res = "";
    while(x > 0 && y > 0)
    {
        if(x < y) 
        {
            res = string(y/x, 'Y') + res;
            y %= x;
        }
        else 
        {
            res = string(x/y, 'X') + res;
            x %= y;
        }
    }
    
    if( (x+y) != 1) return "";
    return res.substr(1);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	TwoRegisters *obj;
	string answer;
	obj = new TwoRegisters();
	clock_t startTime = clock();
	answer = obj->minProg(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = 10;
	p1 = "XXYYX";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = "XX";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 20;
	p1 = "XYYYYXX";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 34;
	p1 = "XYXYXYX";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
