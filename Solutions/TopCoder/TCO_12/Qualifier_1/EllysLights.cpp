#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class EllysLights {
public:
	int getMinimum(string, vector <string>);
};

const int maxN = 50;
int N;
bool on[maxN];
bool off[maxN];
bool same[maxN][maxN];
bool diff[maxN][maxN];
int groupNum[maxN];
int groupCnt[maxN*2];

void dfs(int, int);

int EllysLights::getMinimum(string bulb, vector <string> S) {
	
    memset(groupNum, -1, sizeof(groupNum));
    memset(groupCnt, 0, sizeof(groupCnt));
    N = S.size();
    
    for(int i=0; i < bulb.size(); i++)
    {
        int X = -1; //First switch that controls (i)th bulb
        int Y = -1; //Second switch that controls (i)th bulb
        for(int j=0; j < N; j++)
            if(S[j][i] == 'Y')
            {
                if(X == -1) X = j;
                else Y = j;
            }
        
        if(bulb[i] == 'Y')
        {
            if(X != -1)
            {
                if(Y != -1) diff[X][Y] = diff[Y][X] = true;
                else on[X] = true;
            }
            else
            {
                 //No switch controls this bulb, but this bulb
                 //needs to be turned off. It is impossible.
                return -1;
            }
        }
        else //bulb[i] == 'N'
        {
            if(X != -1)
            {
                if(Y != -1) same[X][Y] = same[Y][X] = true;
                else off[X] = true;
            }
        }
    }

    for(int i=0; i < N; i++)
    {
        if(on[i]) dfs(i, 1); //Step 1
        if(off[i]) dfs(i, 0); //Step 2
    }
    
    //step 3
    int extra = 2;
    for(int i=0; i < N; i++)
        if(groupNum[i] == -1)
        {
            dfs(i, extra);
            extra+=2;
        }
    
    //step 4
    for(int x=0; x < N; x++)
    {
        if(on[x] && groupNum[x] != 1) return -1;
        if(off[x] && groupNum[x] != 0) return -1;
        for(int y=0; y < N; y++)
        {
            if(same[x][y] && groupNum[x] != groupNum[y]) return -1;
            if(diff[x][y] && groupNum[x] == groupNum[y]) return -1;
            
        }
    }
    
    //step 5
    for(int i=0; i < N; i++)
        groupCnt[groupNum[i]]++;
    
    int ans = groupCnt[1];
    for(int i=2; i< extra; i+=2)
        ans += min(groupCnt[i], groupCnt[i+1]);

    return ans;
}

void dfs(int X, int id)
{
    if(groupNum[X] != -1) return;
    groupNum[X] = id;
    
    for(int i=0; i < N; i++)
    {
        if(same[X][i]) dfs(i, id);
        if(diff[X][i]) dfs(i, id^1);
    }
   
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	EllysLights *obj;
	int answer;
	obj = new EllysLights();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "YNYNNN";
	string t1[] = {"YNNYNY","NYYYNN","YNYNYN","NNNNYN","NYNNNY"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "YNYNYN";
	string t1[] = {"NNNNNN","YYYYYY","NYNNNN","NNNYNN","NNNNNY"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 4;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "YYN";
	string t1[] = {"YNY","NYN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "NNYNYNYYYNNYYYYN";
	string t1[] = {"NYNYNYNYNYNYNYNY","YNYNYNYNYNYNYNYN","NNNNNNNNNNNNNNNN","YNNNNNNNNNNNNNNN","NYNNNNNNNNNNNNNN","NNYNNNNNNNNNNNNN","NNNYNNNNNNNNNNNN","NNNNYNNNNNNNNNNN","NNNNNYNNNNNNNNNN","NNNNNNYNNNNNNNNN","NNNNNNNYNNNNNNNN","NNNNNNNNYNNNNNNN","NNNNNNNNNYNNNNNN","NNNNNNNNNNYNNNNN","NNNNNNNNNNNYNNNN","NNNNNNNNNNNNYNNN","NNNNNNNNNNNNNYNN","NNNNNNNNNNNNNNYN","NNNNNNNNNNNNNNNY"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "NYNYNYYYNNYYYNNYNNYYYYYNNYNYYYY";
	string t1[] = {"NNNNNNNNNNNNNNNNNNYNNNNNNNNNNNN","NNNNNNNNYNNNYNNNNYYNYNNNNYNNNNN","NNNNNNNNNYNNNNNNNNNNNNYNNNNNNNN","NNNNNYNNNNNNNNNNNNNNNNNNNNNNNNN","NYNNNNNNNNNNNNYNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNYYNNNNNNNNNNNNNNNY","NNNNNNYNNNNNNNNNNNNYNNNNNYNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","YNNNNNNNNNNNNNNNNNNYNNNNNNNNNNN","NNNYNNNNNNNNNNNNNNNNNNNYYNNNNNN","NYNNNNNNNNNNYNNNNNNNNNNNNNNNYNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNYNNNNNNNNNNNNNNNNNNNNNNNNY","NNNNNNNNNNYNNNNNNNNNYYYNNNNNNNN","NNNYNNNNNNNNNNNNNNNNNNNNNNNYNNN","NNNNNNNNYNNNNNNNNNNNNNNNYNNNNNN","YNNNYNNNNNNNNNNNNNNNNNNNNNNYNNN","NNNNNNNNNNYNNNNNNNNNNNNNNNNNNNN","NNNNYNNYNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNYNNNYNNNYNNNNNNNNNNNNNYN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 7;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "NYNYYNYNYYYYNNYNYNNYYNNNNNYNYNNNNNYNNNYN";
	string t1[] = {"NNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNYNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNN","NNNNNNNNNYNNNNYNNYNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNNYNNNNYNNNNNNNYNNNNNNN","NNNNNYNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNYNNNNNNNNYNNNYNNNNNYNN","NNNNNNNNNNYNNNNNNNNNNNNNNYNNNNNYNNYNNNNN","NNNNNYNNYNNYNNNNNNNNNNNNNNNNNNNNNYNNNNNN","YNNNYNNNNNNNNNNNNNYNNNYNNYNNNNNNNYNNNNNN","NNNNNNNNNYYNNNNNNNNNNNNYNNNNYNNNNNNNNNNN","NNNNNNNNNNNYNYNNNNNNNNNNNNNNNNNNNNNNNNNY","NNNNNNNNNNNNYNNNNNNNNNNNYNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNNNNNNN","NNNYNNNNNNNNNNNNNNNNNYNNNNNNNNNNYNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNYNNYNNNNNNNNNNNNNNNNNNNNNN","NNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYYNNY","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNYNNNNNYNYNNNNNNNNNNNNNNNNNNNNNNNN","NNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNN","NYNNNNNNNNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNN","NNNNYNNNNNN"
			"NNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NYNNNNYNNNNNNNNNNNNNNNNNNNNYNNNNNNNNNNNN","NNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNYNN","NNNNNNNNNNNNYNNYYNNNNNNNNNNNNNNNNNNNNNNN","NNNNNNNYNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","NNNYNNNNNNNNNNNNNNNNYYNNNNNNNNNNNNNNNNNN","NNNNNNNNYNNNNNNNNNNNNNNNNNNNYNYNNNNNNNNN","NNNNNNNNNNNNNNNNNNNNNNNNNNYNNYNNNNNNYNNN"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
