#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class NumberLabyrinthDiv2 {
public:
	int getMinimumNumberOfMoves(vector <string>, int, int, int, int, int);
};

/*
 1 <= R , C <= 50
 */

vector<string> board;
int R;
int C;
int finR, finC;

int mem[51][51];

int backTrack(int K, int jump, int curR, int curC)
{
    int& res = mem[curR][curC];
    cout<<"visiting ("<<curR<<" , "<<curC<<") . res : "<<res<<endl;
    //we visited this location before.
    if(res != -1) return res;
    
    if(curR == finR && curC == finC)
        res = jump;
    else  //first time to visit the current location
    {
        res = INF;//returning to itself is not a valid move
        if(board[curR][curC] == '.')
        {
            if(K == 0) res = INF;
            else
            {
                for(int r = 0; r < R; r++)
                    res = min(res, backTrack(K-1, jump+1, r, curC));
                for(int c = 0; c < C; c++)
                    res = min(res, backTrack(K-1, jump+1, curR, c));                
            }
        }
        else
        {
            int coord = board[curR][curC] - '0';
            
            if((curR + coord) < R)
                res = min(res, backTrack(K, jump+1, curR + coord, curC));
            if((curR - coord) >= 0)
                res = min(res, backTrack(K, jump+1, curR - coord, curC));
            if((curC + coord) < C)
                res = min(res, backTrack(K, jump+1, curR, curC + coord));
            if((curC - coord) >= 0)
                res = min(res, backTrack(K, jump+1, curR, curC - coord));
        }
    }
    
    return res;
}

int NumberLabyrinthDiv2::getMinimumNumberOfMoves(vector <string> _board, int r1, int c1, int r2, int c2, int K) {
	board = _board;
    R = board.size();
    C = board[0].size();
    finR = r2;
    finC = c2;
    
    memset(mem, -1, sizeof(mem));
    
    int ans = backTrack(K, 0, r1, c1);
    return (ans == INF) ? -1 : ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, int p2, int p3, int p4, int p5, bool hasAnswer, int p6) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5;
	cout << "]" << endl;
	NumberLabyrinthDiv2 *obj;
	int answer;
	obj = new NumberLabyrinthDiv2();
	clock_t startTime = clock();
	answer = obj->getMinimumNumberOfMoves(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p6;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	
	{
	// ----- test 0 -----
	string t0[] = {"...2","....","3..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 0;
	p6 = -1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"...2","....","3..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 1;
	p6 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"...3","....","2..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 0;
	p3 = 2;
	p4 = 3;
	p5 = 3;
	p6 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"55255",".0.0.","..9..","..3..","3.9.3","44.44"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 2;
	p3 = 4;
	p4 = 2;
	p5 = 10;
	p6 = 6;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"920909949","900020000","009019039","190299149","999990319","940229120","000409399","999119320","009939999"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	p2 = 3;
	p3 = 1;
	p4 = 1;
	p5 = 50;
	p6 = 10;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
