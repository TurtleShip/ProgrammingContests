#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class LuckyRemainder {
public:
	int getLuckyRemainder(string);
};

string str;
int n;
int ten[55];//ten[i] = 10^i

int dp[55][10][55];

/*
 returns supersum % 9 when current index is "idx",
 current sum is "sum", and you did not use "unused" number of 
 previous numbers
 */
int cal(int idx, int sum, int unused)
{
    //Base case. Covered all positions
    if(idx == n)
        return sum;
    int& res = dp[idx][sum][unused];
    
    if(res != -1) return res;
    
    //do not use the current number
    res = cal(idx + 1, sum, unused + 1) % 9;
    
    //use the current number
    res += cal(idx + 1, (sum + ( str[idx] - '0') * ten[idx - unused]) % 9, unused);
    res = res % 9;
    
    return res;
}

int LuckyRemainder::getLuckyRemainder(string X) {
	
    str = X;
    reverse(X.begin(), X.end());
    n = str.size();
    ten[0] = 1ll;
    /*
     Basically, all ten[i] = 1.
     I did this to clarifiy that (10^i)%9 == 1 for all i
     */
    for(int i=1; i <= 50; i++)
        ten[i] = (ten[i-1] * 10) % 9;
    memset(dp, -1, sizeof(dp));
    
    /* Answer takes care of all numbers (idx == 0),
     starts with 0 sum (sum == 0), and 0 unused number. (unused == 0)
     */
    return cal(0,0,0);
}



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	LuckyRemainder *obj;
	int answer;
	obj = new LuckyRemainder();
	clock_t startTime = clock();
	answer = obj->getLuckyRemainder(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "123";
	p1 = 6;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "24816";
	p1 = 3;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "8";
	p1 = 8;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "11235813213455";
	p1 = 7;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
