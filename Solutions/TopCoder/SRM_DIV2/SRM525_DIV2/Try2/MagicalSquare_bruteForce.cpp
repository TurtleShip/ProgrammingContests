#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class MagicalSquare {
public:
	long long getCount(vector <string>, vector <string>);
};

long long MagicalSquare::getCount(vector <string> rowStrings, vector <string> columnStrings) {
	int rowSize[3];
    int colSize[3];
    ll ans = 0;
    
    REP(i,0,3)
    {
        rowSize[i] = rowStrings[i].size();
        colSize[i] = columnStrings[i].size();
    }
    
    for(int a = 0; a <= rowSize[0]; a++)
        for(int b = 0; (a+b) <= rowSize[0]; b++)
            for(int d = 0; d <= rowSize[1]; d++)
                for(int e = 0; (d+e) <= rowSize[1]; e++)
                {
                    if( (a+d) > colSize[0] || (b+e) > colSize[1] ) continue;
                    
                    int c = rowSize[0] - a - b;
                    int f = rowSize[1] - d - e;
                    int g = colSize[0] - a - d;
                    int h = colSize[1] - b - e;
                    int i = rowSize[2] - g - h;
                    if(i != (colSize[2] - c - f)) continue;
                
                    /*string s00 = rowStrings[0].substr(0,a);
                    string s01 = (b > 0) ? (rowStrings[0].substr(a,b)) : "";
                    string s02 = (c > 0) ? (rowStrings[0].substr(a+b)) : "";
                    
                    string s10 = rowStrings[1].substr(0,d);
                    string s11 = (e > 0) ? (rowStrings[1].substr(d,e)) : "";
                    string s12 = (f > 0) ? (rowStrings[1].substr(d+e)) : "";
                    
                    if((s00 + s10) != columnStrings[0].substr(0, (a+d))) continue;
                    if((s01 + s11) != columnStrings[1].substr(0, (b+e))) continue;
                    if((s02 + s12) != columnStrings[2].substr(0, (c+f))) continue;
                     */
                    
                    if( ( (rowStrings[0].substr(0,a)) + (rowStrings[1].substr(0,d))) != columnStrings[0].substr(0, (a+d))) continue;
                    if( ( ((b > 0) ? (rowStrings[0].substr(a,b)) : "") + ((e > 0) ? (rowStrings[1].substr(d,e)) : "")) != columnStrings[1].substr(0, (b+e))) continue;
                    if( ( ((c > 0) ? (rowStrings[0].substr(a+b)) : "") + ((f > 0) ? (rowStrings[1].substr(d+e)) : "") ) != columnStrings[2].substr(0, (c+f))) continue;

                  /*  string s20 = (g > 0) ? (columnStrings[0].substr(a+d)) : "";
                    string s21 = (h > 0) ? (columnStrings[1].substr(b+e)) : "";
                    string s22 = (i > 0) ? (columnStrings[2].substr(c+f)) : "";
                    */
                    if( ( ((g > 0) ? (columnStrings[0].substr(a+d)) : "") + ((h > 0) ? (columnStrings[1].substr(b+e)) : "") + ((i > 0) ? (columnStrings[2].substr(c+f)) : "") ) != rowStrings[2]) continue;
                   // if((s20 + s21 + s22) != rowStrings[2]) continue;
                    //cout<<"["<<s00<<"] ["<<s01<<"] ["<<s02<<"]"<<endl;
                    //cout<<"["<<s10<<"] ["<<s11<<"] ["<<s12<<"]"<<endl;
                    //cout<<"["<<s
                    //cout<<endl;
                    
                    ans++;
                }
    return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MagicalSquare *obj;
	long long answer;
	obj = new MagicalSquare();
	clock_t startTime = clock();
	answer = obj->getCount(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	long long p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"f","o","x"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"f","o","x"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"x","x","x"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"x","","xx"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"cd","cd","cd"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"dvd","dvd","dvd"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"abab","ab","abab"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"abab","ab","abab"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 11ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"qwer","asdf","zxcv"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"qaz","wsx","erdfcv"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
