#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define FOR(i,a,b) for(int i=a; i < b; i++)
#define FORE(i, a, b) for(int i=a; i <=b; i++)

typedef long long ll; 
 
class DropCoins {
public:
	int getMinimum(vector <string> board, int K);
};

int DropCoins::getMinimum(vector <string> board, int K){
	//dp[r][c] = number of coins from 0,0 to r,c
    int dp[30][30] = {0};

    dp[0][0] = (board[0][0] == 'o') ? 1 : 0;
    int R = board.size();
    int C = board[0].size();
    for(int c = 1; c < C; c++)
    {
        int cur = (board[0][c] == 'o') ? 1 : 0;
        dp[0][c] = dp[0][c-1] + cur;
    }
    for(int r = 1; r < R; r++)
    {
        int cur = (board[r][0] == 'o') ? 1 : 0;
        dp[r][0] = dp[r-1][0] + cur;
    }
    for(int r=1; r < R; r++)
        for(int c = 1; c < C; c++)
        {
            int cur = (board[r][c] == 'o') ? 1 : 0;
            dp[r][c] = dp[r-1][c] + dp[r][c-1] - dp[r-1][c-1] + cur;
        }
    
    if(dp[R-1][C-1] < K) return -1;
    
    int ans = -1;
    for(int sr = 0; sr < R; sr++)
        for(int sc =0; sc < C; sc++)
        {
            for(int er = sr; er < R; er++)
            {
                for(int ec = sc; ec < C; ec++)
                {
                    int upSum = (sr > 0) ? dp[sr-1][ec] : 0;
                    int leftSum = (sc > 0) ? dp[er][sc-1] : 0;
                    int upleftSum = (sr > 0 && sc > 0) ? dp[sr-1][sc-1] : 0;
                    int cur = dp[er][ec] - upSum - leftSum + upleftSum;
                    if(cur == K)
                    {
                        int left = sc;
                        int right = C - ec - 1;
                        int up = sr;
                        int down = R - er - 1;
                        int move = min(left,right) * 2 + max(left,right) + min(up,down)*2 + max(up,down);
                        if(ans == -1 || ans > move)
                            ans = move;
                    }
                }
            }
        }
    return ans;
}
 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	DropCoins *obj;
	int answer;
	obj = new DropCoins();
	clock_t startTime = clock();
	answer = obj->getMinimum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {".o..","oooo","..o."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {".....o","......","oooooo","oooooo","......","o....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	p2 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"....",".oo.",".oo.","...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".......","..ooo..","ooooooo",".oo.oo.","oo...oo"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	p2 = 4;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".................",".ooooooo...oooo..",".ooooooo..oooooo.",".oo.......oo..oo.",".oo.......oo..oo.",".ooooo.....oooo..",".ooooooo...oooo..",".....ooo..oo..oo.","......oo..oo..oo.",".ooooooo..oooooo.",".oooooo....oooo..","................."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 58;
	p2 = 6;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
