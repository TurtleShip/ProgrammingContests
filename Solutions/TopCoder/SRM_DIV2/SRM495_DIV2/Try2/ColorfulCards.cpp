#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
#define PB push_back

int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class ColorfulCards {
public:
	vector <int> theCards(int, string);
};

void sieve();

bool isPrime[1001];

/*
 Red = prime
 blue = not prime
 */
vector <int> ColorfulCards::theCards(int N, string colors) {
    
    sieve();
    
    int S = colors.size();
    vector<int> minV(S,0);
    vector<int> maxV(S,0);
    
    int num = 1;
    
    for(int i=0; i < S; i++)
    {
        if(colors[i] == 'R')
        {
            while(!isPrime[num])
                num++;
            minV[i] = num++;
            
        }
        else
        {
            while(isPrime[num])
                num++;
            minV[i] = num++;
        }
    }
    
    num = N;
    
    for(int i = S-1; i >= 0; i--)
    {
        if(colors[i] == 'R')
        {
            while(!isPrime[num])
                num--;
            maxV[i] = num--;
        }
        else
        {
            while(isPrime[num])
                num--;
            maxV[i] = num--;
        }
    }
  
    vector<int> ans(S,0);
    for(int i=0; i < S; i++)
        ans[i] = (minV[i] == maxV[i]) ? minV[i] : -1;
    
    return ans;
}

void sieve()
{
	fill(isPrime, isPrime + 1001, true);
	isPrime[0] = false;
	isPrime[1] = false;
	int m = (int)sqrt(1000);
	
	for(int i=2; i <=m; i++)
		if(isPrime[i])
			for(int k= i*i; k <= 1000; k+=i)
				isPrime[k] = false;
}
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, string p1, bool hasAnswer, vector <int> p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	ColorfulCards *obj;
	vector <int> answer;
	obj = new ColorfulCards();
	clock_t startTime = clock();
	answer = obj->theCards(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p2.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p2[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p2.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p2[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	string p1;
	vector <int> p2;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = "RRR";
	int t2[] = {2,3,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 7;
	p1 = "BBB";
	int t2[] = {1,4,6};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 6;
	p1 = "RBR";
	int t2[] = {-1,4,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 58;
	p1 = "RBRRBRBBRBRRBBRRBBBRRBBBRR";
	int t2[] = {-1,-1,-1,-1,-1,-1,-1,-1,17,18,19,23,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,47,53};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 495;
	p1 = "RBRRBRBBRBRRBBRRBBBRRBBBRR";
	int t2[] = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
