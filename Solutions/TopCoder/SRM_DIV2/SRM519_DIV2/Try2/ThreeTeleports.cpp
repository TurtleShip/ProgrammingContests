#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class ThreeTeleports {
public:
	int shortestDistance(int, int, int, int, vector <string>);
};

int ThreeTeleports::shortestDistance(int xMe, int yMe, int xHome, int yHome, vector <string> teleports) {

    int num_nodes = 8;
	vector< pair<int,int> >nodes;    
    
    nodes.push_back( make_pair(xMe, yMe) );
    REP(i,0,3)
    {
        stringstream ss;
        ss<<teleports[i];
        int x1, y1, x2, y2;
        ss>>x1; ss>>y1; ss>>x2; ss>>y2;
        nodes.push_back( make_pair(x1,y1) );
        nodes.push_back( make_pair(x2,y2) );
    }
    nodes.push_back( make_pair(xHome, yHome) );
    
    ll adj[num_nodes][num_nodes];
    memset(adj, -1, sizeof(adj) );
    
    //connect teleports
    for(int i=1; i <=3; i++)
    {
        adj[2*i-1][2*i] = 10ll;
        adj[2*i][2*i-1] = 10ll;
    }
    
    //connect everywhere else
    for(int i=0; i < num_nodes; i++)
        for(int j=0; j < num_nodes; j++)
            if(adj[i][j] == -1)
                adj[i][j] = (ll)abs(nodes[j].first - nodes[i].first) + (ll)abs(nodes[j].second - nodes[i].second);
    
    //Floyd-warshall
    for(int k=0; k < num_nodes; k++)
        for(int i=0; i < num_nodes; i++)
            for(int j=0; j < num_nodes; j++)
                adj[i][j] = min(adj[i][j], adj[i][k] + adj[k][j]);
    
    return (int)adj[0][7];
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, vector <string> p4, bool hasAnswer, int p5) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << "{";
	for (int i = 0; int(p4.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p4[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ThreeTeleports *obj;
	int answer;
	obj = new ThreeTeleports();
	clock_t startTime = clock();
	answer = obj->shortestDistance(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p5 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p5;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	vector <string> p4;
	int p5;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 3;
	p2 = 4;
	p3 = 5;
	string t4[] = {"1000 1001 1000 1002","1000 1003 1000 1004","1000 1005 1000 1006"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 0;
	p1 = 0;
	p2 = 20;
	p3 = 20;
	string t4[] = {"1 1 18 20","1000 1003 1000 1004","1000 1005 1000 1006"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 14;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 0;
	p1 = 0;
	p2 = 20;
	p3 = 20;
	string t4[] = {"1000 1003 1000 1004","18 20 1 1","1000 1005 1000 1006"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 14;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 10;
	p2 = 10000;
	p3 = 20000;
	string t4[] = {"1000 1003 1000 1004","3 3 10004 20002","1000 1005 1000 1006"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 30;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 3;
	p1 = 7;
	p2 = 10000;
	p3 = 30000;
	string t4[] = {"3 10 5200 4900","12212 8699 9999 30011","12200 8701 5203 4845"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 117;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 0;
	p1 = 0;
	p2 = 1000000000;
	p3 = 1000000000;
	string t4[] = {"0 1 0 999999999","1 1000000000 999999999 0","1000000000 1 1000000000 999999999"};
			p4.assign(t4, t4 + sizeof(t4) / sizeof(t4[0]));
	p5 = 36;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
