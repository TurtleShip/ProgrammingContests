#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define FOR(i,a,b) for(int i=a; i < b; i++)
#define FORE(i, a, b) for(int i=a; i <=b; i++)

bool isPalindrome(string str)
{
    string rev = str;
    reverse(rev.begin(), rev.end());
    if(str.compare(rev) == 0)
        return true;
    else return false;
}

bool descending(int a, int b)
{
    if(a > b) return true;
    return false;
}

typedef long long ll; 
 
class PalindromeGame {
public:
	int getMaximum(vector <string> front, vector <int> back);
};

int PalindromeGame::getMaximum(vector <string> front, vector <int> back){
    int N = front.size();
    map<string, vector<int> > myMap;
    int alone = 0;
    int doubles = 0;
 
    for(int i=0; i < N; i++)
    {
        vector<int> temp;
        temp.push_back(back[i]);
        map<string, vector<int> >::iterator it;
        pair< map< string, vector<int> >::iterator, bool > ret;
        ret = myMap.insert(pair< string, vector<int> >(front[i], temp));
        if(!ret.second)
        {
            it = ret.first;
            it->second.push_back(back[i]);
            sort(it->second.begin(), it->second.end(), descending);
        }
    }
    
    map<string, vector<int> >::iterator itr;
    for(itr = myMap.begin(); itr != myMap.end(); itr++)
    {
        string curStr = itr->first;
        vector<int> curVec = itr->second;
        if(isPalindrome(curStr))
        {
            int curAlone = 0;
            for(int i=0; i < curVec.size(); i++)
            {
                curAlone += curVec[i];
            }
            if(curVec.size() % 2 == 0)
            {
                doubles += curAlone;
            }
            else
            {
                curAlone -= curVec[curVec.size()-1];
                doubles += curAlone;
                alone = max(alone, curVec[curVec.size()-1]);
            }
        }
        else
        {
            reverse(curStr.begin(), curStr.end());
            map<string, vector<int> >::iterator curItr;
            curItr = myMap.find(curStr);
            if(curItr != myMap.end())
            {
                vector<int> secVec = curItr->second;
                int curSize = min(curVec.size(), secVec.size());
                for(int i=0; i < curSize; i++)
                {
                    doubles += curVec[i] + secVec[i];
                }
            }
            curItr->second.clear();
        }
    }
	
 /*   for(int i=0; i < aloneCount; i++)
    {
        if(alone < arrAlone[i])
        {
            alone = arrAlone[i];
            aloneIdx = i;
            arrSmallNum = arrSmall[i];
        }
        else if(alone == arrAlone[i] && arrSmallNum > arrSmall[i])
        {
            alone = arrAlone[i];
            aloneIdx = i;
            arrSmallNum = arrSmall[i];
        }
            
    }
    
    for(int i=0; i < aloneCount; i++)
    {
        if(i == aloneIdx) continue;
        if(arrIsAlone[i])
            doubles += arrAlone[i];
        else
        {
            doubles += (arrAlone[i] - arrSmall[i]);
        }
    }
*/
    //print vector
   /* for(itr = myMap.begin(); itr != myMap.end(); itr++)
    {
        cout<<itr->first<<" : ";
        vector<int> cur = itr->second;
        for(int i=0; i < cur.size(); i++)
            cout<<cur[i]<<" -> ";
        cout<<endl;
    }*/
    return alone + doubles;
}
 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	PalindromeGame *obj;
	int answer;
	obj = new PalindromeGame();
	clock_t startTime = clock();
	answer = obj->getMaximum(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"topcoder","redcoder","redocpot"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {7,5,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 10;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"rabbit"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1000000};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"abc","abc","def","cba","fed"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {24,7,63,222,190};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 499;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
