#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

typedef long long ll; 

class PackingBallsDiv2 {
public:
	int minPacks(int R, int G, int B);
};


int PackingBallsDiv2::minPacks(int R, int G, int B) {
	int res = 0;
	vector<int> V;
	V.push_back(R);
	V.push_back(G);
	V.push_back(B);
	sort(V.begin(), V.end());
	
	// Make a package with 3 balls
	if(V[0] > 0) {
		res += V[0];
		V[1] -= V[0];
		V[2] -= V[0];
	}
	res += V[1] / 3;
	res += V[2] / 3;
	V[1] = V[1] % 3;
	V[2] = V[2] % 3;
	
	// Make a package with 2 balls
	if(V[1] > 0 && V[2] > 0) {
		int twos = min(V[1], V[2]);
		V[1] -= twos;
		V[2] -= twos;
		res += twos;
	}
	
	// Make a package with 2 or 1 balls
	res += (V[1] > 0) ? 1 : 0;
	res += (V[2] > 0) ? 1 : 0;
	
	return res;
}
 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	PackingBallsDiv2 *obj;
	int answer;
	obj = new PackingBallsDiv2();
	clock_t startTime = clock();
	answer = obj->minPacks(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 4;
	p1 = 2;
	p2 = 4;
	p3 = 4;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 7;
	p2 = 1;
	p3 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 3;
	p2 = 5;
	p3 = 4;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 78;
	p1 = 53;
	p2 = 64;
	p3 = 66;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 100;
	p1 = 100;
	p2 = 100;
	p3 = 100;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
