#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)

typedef long long ll;
 
class KingdomXCitiesandVillagesAnother {
public:
	double determineLength(vector <int>, vector <int>, vector <int>, vector <int>);
};

double getDist(int x1, int y1, int x2, int y2)
{
    return sqrt((ll)abs(x1-x2) * (ll)abs(x1-x2) + (ll)abs(y1-y2) * (ll)abs(y1-y2));
}

/*
 Let bool goCity = false;
 
 Pick a village.
 Connect to one of below
 1) closest city
 2) closet village
 
 If a village chooses option 1, make goCity = true.
 
 1 <= N <= 50
 1 <= M <= 50
*/

double KingdomXCitiesandVillagesAnother::determineLength(vector <int> cX, vector <int> cY, vector <int> vX, vector <int> vY) {
	int N = cX.size();
    int M = vX.size();

    double sum = 0.0;
    double INF = numeric_limits<double>::max();
    
    /*
     chk[i]
     = true if (i)th village is connected to a city
     */
    int count = 0;
    bool chk[M];
    memset(chk, false, sizeof(chk));
    
    /*
     v_to_c[i] = distance between village i and the closet city
     */
    double v_to_c[M];
    double v_to_v[M][M];
    
    for(int i=0; i < M; i++)
    {
        double cityD = INF;
        for(int j=0; j < N; j++)
        {
            cityD = min(cityD, getDist(vX[i], vY[i], cX[j], cY[j]));
        }
            v_to_c[i] = cityD;
        
        for(int j=0; j < M; j++)
            v_to_v[i][j] = getDist(vX[i], vY[i], vX[j], vY[j]);
    }
    
    while(count < M)
    {
        //cout<<"count : "<<count<<endl;
        int prev = count;
        for(int i=0; i < M; i++)
        {
            if(chk[i]) continue;
            
            int choice = -1;
            double cityD = v_to_c[i];
            double vilD = INF;
            
            for(int j=0; j < M; j++)
            {
                if(i == j) continue;
                if(v_to_v[i][j] < vilD)
                {
                    vilD = v_to_v[i][j];
                    choice = j;
                }
            }

            if(cityD <= vilD || (vilD < cityD && chk[choice]) )
            {
                sum += min(cityD, vilD);
                chk[i] = true;
                count++;
            }
        }
        
        /*
         We have an island of villages. They are closest to each other.
         Go through them, find one who is nearest to
         either a city or villages connected to a city.
         */
        if(prev == count)
        {
            int pick = -1;
            double dist = INF;
            for(int i=0; i < M; i++)
            {
                if(chk[i]) continue;
                double cur = v_to_c[i];
                
                for(int j=0; j < M; j++)
                {
                    if(i==j || !chk[j]) continue;
                    cur = min(cur, v_to_v[i][j]);
                }
                
                if(cur < dist)
                {
                    dist = cur;
                    pick = i;
                }
            }
            sum += dist;
            chk[pick] = true;
            count++;
        }
    }
    return sum;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	KingdomXCitiesandVillagesAnother *obj;
	double answer;
	obj = new KingdomXCitiesandVillagesAnother();
	clock_t startTime = clock();
	answer = obj->determineLength(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	double p4;
	
	{
	// ----- test 0 -----
	int t0[] = {1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 2.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 2.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 2.8284271247461903;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
