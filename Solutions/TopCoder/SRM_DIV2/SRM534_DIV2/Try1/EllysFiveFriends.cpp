#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class EllysFiveFriends {
public:
	int getZero(vector <int>);
};

int mod = 1000000007;
int ID[5][10001];
int mem[26][26][26][26][26];

void setID(int who, int num, int id)
{
    ID[who][num] = id;
    
    if(num == 0) return;
    if(num%2) setID(who, num-1, id+1);
    else setID(who, num/2, id+1);
}

int rec(vector<int> V)
{
    int& res = mem[ID[0][V[0]]][ID[1][V[1]]][ID[2][V[2]]][ID[3][V[3]]][ID[4][V[4]]];
    
    if(res != -1)
        return res;
    
    res = 0;
    for(int i=0; i < 5; i++)
    {
        int j = (i+1)%5;
        
        if( V[i] == 0 || V[j] == 0) continue;
        
        bool iOdd = V[i]%2;
        bool jOdd= V[j]%2;
        if(iOdd && jOdd)
        {
            V[i]--;
            V[j]--;
            res = (res + rec(V))%mod;
            V[i]++;
            V[j]++;
        }
        V[i]/=2;
        V[j]/=2;
        res = (res + rec(V))%mod;
        V[i]*=2;
        V[j]*=2;
        if(iOdd) V[i]++;
        if(jOdd) V[j]++;
    }
    return res;
    
}

int EllysFiveFriends::getZero(vector <int> numbers) {
	
    int N = numbers.size();
    for(int i=0; i < N; i++) setID(i, numbers[i], 0);
    
    memset(mem, -1, sizeof(mem));

    mem[ID[0][0]][ID[1][0]][ID[2][0]][ID[3][0]][ID[4][0]] = 1;
    
    return rec(numbers);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	EllysFiveFriends *obj;
	int answer;
	obj = new EllysFiveFriends();
	clock_t startTime = clock();
	answer = obj->getZero(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {5,1,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {2,1,1,1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {3,4,1,4,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 520;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {42,666,1337,666,42};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 549119981;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {8792,9483,6787,9856,6205};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 165501353;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {10000,10000,10000,10000,10000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 952019520;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
