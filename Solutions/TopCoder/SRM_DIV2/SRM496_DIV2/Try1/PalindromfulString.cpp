#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class PalindromfulString {
public:
	long long count(int, int, int);
};

ll N, M, K;
ll ans;
ll permu[12];

void rec(int idx, string curStr, char nextChar)
{
    //cout<<"rec("<<idx<<" , "<<curStr<<" , "<<nextChar<<")"<<endl;
    if(idx == N)
    {
        ll curK = 0ll;
        for(int i=0; i < (N-M+1); i++)
        {
            int start = i;
            int last = (i+M-1);
            bool valid = true;
            while(start < last)
            {
                if(curStr[start] != curStr[last])
                {
                    valid = false;
                    break;
                }
                start++;
                last--;
            }
            if(valid) curK+=1ll;
        }
        if(curK >= K)
            ans += permu[(nextChar - 'A')];
    }
    else
    {
        rec(idx+1, curStr + nextChar, nextChar + 1);
        
        for(char ch = 'A'; ch < nextChar; ch++)
        {
            rec(idx+1, curStr + ch, nextChar);
        }
    }
}

long long PalindromfulString::count(int _N, int _M, int _K) {

    N = (ll)_N;
    M = (ll)_M;
    K = (ll)_K;
    
	ans = 0ll;
    permu[0] = 0ll;
    permu[1] = 26ll; //number of uppercase characters
    for(int i=2; i <= N; i++)
        permu[i] = permu[i-1] * (26ll - ll(i) + 1ll);
    
    rec(0, "", 'A');
    
    return ans;

}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	PalindromfulString *obj;
	long long answer;
	obj = new PalindromfulString();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	long long p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	p2 = 1;
	p3 = 26ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 2;
	p2 = 0;
	p3 = 676ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	p1 = 2;
	p2 = 1;
	p3 = 1326ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 4;
	p2 = 1;
	p3 = 676ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 7;
	p1 = 3;
	p2 = 3;
	p3 = 4310176ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
