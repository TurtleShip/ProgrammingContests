#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class DengklekMakingChains {
public:
	int maxBeauty(vector <string>);
};

/*
 leftover = a chaince piece consisting of exactly 3 links.
 */

int toInt(char ch)
{
    if(ch == '.') return 0;
    return (ch - '0');
}

int DengklekMakingChains::maxBeauty(vector <string> chains) {

	int left = 0;
    int right = 0;
    int mid = 0;
    int solo = 0;
    int maxSideL = 0;
    int maxSideR = 0;
    

    vector<int> sideL;
    vector<int> sideR;
    
    int N = chains.size();
    for(int i=0; i < N; i++)
    {
        string cur =chains[i];
        int len = cur.size();
        bool isDot1 = (cur[0] == '.');
        bool isDot2 = (cur[1] == '.');
        bool isDot3 = (cur[2] == '.');
        
        bool isSolo = (isDot1 && !isDot2 && isDot3);
        bool isSide = (!isDot1 && isDot2 && !isDot3);
        bool isRusty = (isDot1 && isDot2 && isDot3);
        bool isLeft = (isDot1);
        bool isRight = (isDot3);
        bool isMiddle = (!isDot1 && !isDot2 && !isDot3);
        
        int now = 0;
        for(int j=0; j < len; j++)
            now += toInt(cur[j]);
        
        if(isSolo)
        {
            solo = max(solo, now);
        }
        else if(isSide)
        {
            maxSideL = max(maxSideL, toInt(cur[2]));
            maxSideR = max(maxSideR, toInt(cur[0]));
            sideL.push_back(toInt(cur[2]));
            sideR.push_back(toInt(cur[0]));
        }
        else if(isMiddle)
        {
                mid += now;
        }
        else if(isRusty)
        {
            continue;
        }
        else if(isLeft)
        {
            left = max(left, now);
        }
        else if(isRight)
        {
            right = max(right ,now);
        }
       
    }

    int S = sideL.size();
    int best = 0;
   
    //left + middle + right
    best = max(best, left + right);
    
    //left + middle + side
    best = max(best, left + maxSideR );

    //side + middle + right
    best = max(best, maxSideL + right );
    
   
    //side + middle + side
    for(int i=0; i < S; i++)
    {
        for(int j=0; j < S; j++)
        {
            if(i==j) continue;
            best = max(best , sideL[i] + sideR[j]);
        }
    }
    solo = max(solo, left);
    solo = max(solo, right);
    solo = max(solo, mid);
    solo = max(solo, maxSideL);
    solo = max(solo, maxSideR);
    
    return max(solo ,(mid + best));
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DengklekMakingChains *obj;
	int answer;
	obj = new DengklekMakingChains();
	clock_t startTime = clock();
	answer = obj->maxBeauty(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {".15","7..","402","..3"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 19;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..1","7..","567","24.","8..","234"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"...","..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"16.","9.8",".24","52.","3.1","532","4.4","111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 28;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"..1","3..","2..",".7."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"412","..7",".58","7.8","32.","6..","351","3.9","985","...",".46"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 58;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
