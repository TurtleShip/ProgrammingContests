#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class ToyTrain {
public:
	int getMinCost(vector <string>);
};

const int maxN = 55;
bool isHor[maxN][maxN];
bool isVer[maxN][maxN];
bool payLord[10];
int abPos[maxN];

int ToyTrain::getMinCost(vector <string> field) {

    memset(isHor, false, sizeof(isHor));
    memset(isVer, false, sizeof(isVer));
    memset(payLord, false, sizeof(payLord));
    
    int R = field.size();
    int C = field[0].size();
    int ct = 0;
    int res = 0;
    
    for(int r=0; r < R; r++) {
        int sz = 0;
        // do row sweap
        for(int c=0; c < C; c++) {
            if(field[r][c] == 'A' || field[r][c] == 'B') {
                ct++;
                abPos[sz++] = c;
            }
        }
        
        if(sz % 2 == 1) return -1;
        for(int i=0; i < sz/2; i++) {
            if(field[r][abPos[2*i]] == field[r][abPos[2*i+1]])
                return -1;
        }
        if(sz > 0) {
            for(int i=0; i < sz/2; i++) {
                for(int j=abPos[2*i]+1; j < abPos[2*i+1]; j++)
                    isHor[r][j] = true;
            }
        }
    }
    
    for(int c = 0; c < C; c++) {
        int sz = 0;
        // do column sweap
        for(int r = 0;r < R; r++) {
            if(field[r][c] == 'A' || field[r][c] == 'B') {
                ct++;
                abPos[sz++] = r;
            }
        }
        if(sz % 2 == 1) return -1;
        for(int i=0; i < sz/2; i++) {
            if(field[abPos[2*i]][c] == field[abPos[2*i+1]][c])
                return -1;
        }
        if(sz > 0) {
            for(int i=0; i < sz/2; i++) {
                for(int j=abPos[2*i]+1; j < abPos[2*i+1]; j++)
                    isVer[j][c] = true;
            }
        }
    }
    
    // special case where there is no A or B
    if(ct == 0) return -1;
	
    for(int r=0; r<R; r++)
        for(int c=0; c<C; c++) {
            if( isHor[r][c] && isVer[r][c] )return -1;
            if( !isHor[r][c] && !isVer[r][c] && field[r][c] == 'S') return -1;
            if(isHor[r][c] || isVer[r][c]) {
                char ch = field[r][c];
                if('1' <= ch && ch <= '9') payLord[ch-'0'] = true;
            }
        }
    
    for(int i=1; i <= 9; i++)
        if(payLord[i]) res += i;
    
    return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ToyTrain *obj;
	int answer;
	obj = new ToyTrain();
	clock_t startTime = clock();
	answer = obj->getMinCost(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"BA","SS","AB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"ABBA","BAAB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"AA","AA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"..AB","B..A","....","A.B."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"A1B8A2B","16A.B22","BAB.9.A","ABA.7.B","B12345A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 31;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"..A.B",".1.2.","A.B..",".3.4.","B...A"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 7 -----
	string t0[] = {"ASBSBSA","S.S.S.S","BSASASB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(7, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
