#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = 1000000;
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class SlimeXResidentSlime {
public:
	int exterminate(vector <string> field);
};

int dist[55][55];
int adj[10][10]; //adjacency matrix
int rows[10];
int cols[10];
int times[10];
vector<string> field;
int R,C,N;
int dr[4] = {1,-1,0,0};
int dc[4] = {0,0,1,-1};

//breadth first search. Finds distance from (sr,sc) to all other points.
void bfs(int sr, int sc)
{
    REP(i,0,R) REP(j,0,C) dist[i][j] = INF;
    
    dist[sr][sc] = 0;
    queue<int> q;
    q.push(sr);
    q.push(sc);
    
    while(!q.empty())
    {
        int r = q.front(); q.pop();
        int c = q.front(); q.pop();
        
        REP(i,0,4)
        {
            int nr = r + dr[i];
            int nc = c + dc[i];
            if(0 <= nr && nr < R && 0 <= nc && nc < C && field[nr][nc] != '#' && dist[nr][nc] == INF)
            {
                dist[nr][nc] = dist[r][c] + 1;
                q.push(nr);
                q.push(nc);
            }
        }
    }
}


int SlimeXResidentSlime::exterminate(vector <string> _field){
	field = _field;
    R = field.size();
    C = field[0].size();
    N = 0;
    
    //get slimes
    REP(i,0,R)
    REP(j,0,C)
    if(isdigit(field[i][j]))
    {
        rows[N] = i; cols[N] = j; times[N] = (field[i][j] - '0');
        N++;
        if(N > 9) return -1;
    }
    
    //get start point
    REP(i,0,R) REP(j,0,C)
    if(field[i][j] == '$')
    {
        rows[N] = i; cols[N] = j;
    }
    
    //fill adj matrix
    REP(i,0,N+1)
    {
        bfs(rows[i],cols[i]);
        REP(j,0,N+1)
        {
            adj[i][j] = dist[rows[j]][cols[j]];
        }
    }
    
    vector<int> order;
    REP(i,0,N) order.push_back(i);
    int ans = INF;
    do{
        /* We are going from the last slime to the first slime, and then to start point.
          This way, we can tell if we have enough time to reach each slime. */
        
        //Figure out how much time will pass from leaving slime i to reaching the last slime
 
        int time = 0;
        bool failed = false;
        REP(i,0,N-1)
        {
            time += adj[order[i]][order[i+1]];
            
            if(time >= times[order[i+1]])
            {
                failed = true;
                break;
            }
        }
        if(failed) continue;
        time += adj[order[N-1]][N];
        
        ans = min(ans , time);
        
    }while(next_permutation(order.begin(), order.end()));
    
    if(ans == INF) return -1;
    return ans;
}
 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	SlimeXResidentSlime *obj;
	int answer;
	obj = new SlimeXResidentSlime();
	clock_t startTime = clock();
	answer = obj->exterminate(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"#1$",".2."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"$","1","1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"$124"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"$.#2","#..1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 6;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
