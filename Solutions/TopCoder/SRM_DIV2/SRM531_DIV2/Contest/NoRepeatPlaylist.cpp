#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class NoRepeatPlaylist {
public:
	int numPlaylists(int, int, int);
};

int mod = 1000000007;

int NoRepeatPlaylist::numPlaylists(int N, int M, int P) {
	
    /*
     dp[i][j]
     = number of different ways to make a playlist using song[0...i]
     with length j.
     ans : dp[N-1][P]
     
     Base.
     do[1][j] = 1
     
     int ways = (M < i) ? (i+1-M) : 0;
     dp[i][j] = dp[i-1][j-1] * ( 1 + (ways));
     */
    
/*    int dp[N][P+1];
    memset(dp, 0, sizeof(dp));
    
    dp[0][1] = 1;
    if(M == 0)
    {
        for(int j=1; j < (P+1); j++)
            dp[0][j] = 1;
    }
  */  
/*
        for(int j=1; j < (P+1); j++)
        {
            if(j==1)
            {
                dp[N-1][j] = N;
                continue;
            }
            if(j <= N)
            {
                dp[N-1][j] = dp[N-1][j-1] * N;
            }
            else
            {
                dp[N-1][j] = dp[N-1][j-1] * ( N- M) + (N-M);
            }
        } */

    if(N == M) return 0;
    
    int ans = 1;
    
    for(int j=1; j <= N; j++)
        ans = (ans * j) % mod;
    
    cout<<"ans : "<<ans<<endl;
    
    for(int j = N+1; j <= P; j++)
    {
        if( j%2 == 1)
        {
            ans = (ans * (N-M)%mod * (2ll) - (N-M))% mod;
        }
        else
        {
            ans = (ans * ((N-M)% mod) * 2ll) % mod;
        }
    }
    
    return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	NoRepeatPlaylist *obj;
	int answer;
	obj = new NoRepeatPlaylist();
	clock_t startTime = clock();
	answer = obj->numPlaylists(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 0;
	p2 = 3;
	p3 = 1;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1;
	p1 = 1;
	p2 = 3;
	p3 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2;
	p1 = 0;
	p2 = 3;
	p3 = 6;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	p1 = 0;
	p2 = 4;
	p3 = 24;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 2;
	p1 = 1;
	p2 = 4;
	p3 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 50;
	p1 = 5;
	p2 = 100;
	p3 = 222288991;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
