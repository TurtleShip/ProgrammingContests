#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class FiveHundredEleven {
public:
	string theWinner(vector <int>);
};

vector<int> vec;
int n;
int dp[512][51];

/*
 Given that current value of memory == mem, and "played" number of turns have been played,
 return true if the current player wins.
 */
int isWinning(int mem, int played)
{
    //If mem == 511, this means that previous player made a move that resulted
    //in making mem == 511. Current player wins.
    if(mem == 511) return true;
    //"n" number of turns have been played. There are no more cards to play.
    //Current player loses
    if(played == n) return false;
    
    int& result = dp[mem][played];
    
    if(result == -1)
    {
        /*
         we begin by assuming that the current player loses.
         We will look for a way the current player can win.
         If there is at least one such way, pick it.
         */
        
        result = false;
        
        //number of cards that do not change value of mem.
        //It is very likely that these cards have been played.
        //cnt >= played
        int cnt = 0;
        
        for(int i=0; i < n; i++)
        {
            if((mem | vec[i]) == mem) cnt+=1;
        }
        
        /* If there is a card that does not change value of mem,
         it is safe to play it */
        if(cnt > played && !isWinning(mem, played + 1))
            result = true;
        
        /* Try every possible move. See if any of them results in a win */
        for(int i=0; i < n; i++)
            if((mem | vec[i]) != mem && !isWinning((mem | vec[i]), played +1))
                result = true;
    }
    return result;
}



string FiveHundredEleven::theWinner(vector <int> cards) {
	vec = cards;
    n = cards.size();
    memset(dp, -1, sizeof(dp));
    if(isWinning(0,0))
        return "Fox Ciel";
    else 
        return "Toastman";
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	FiveHundredEleven *obj;
	string answer;
	obj = new FiveHundredEleven();
	clock_t startTime = clock();
	answer = obj->theWinner(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	string p1;
	
	{
	// ----- test 0 -----
	int t0[] = {3,5,7,9,510};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Fox Ciel";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Toastman";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {511};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Toastman";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {5,58,192,256};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Fox Ciel";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
