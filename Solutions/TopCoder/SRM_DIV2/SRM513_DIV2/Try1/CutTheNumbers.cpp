#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
 
class CutTheNumbers {
public:
	int maximumSum(vector <string> board);
};

int CutTheNumbers::maximumSum(vector <string> board){
    int res = 0;
    int H = board.size();
    int W = board[0].size();
    int shift = 1<<H*W;
    //cout<<"Shift : "<<shift<<endl;
    for(int mask=0; mask < shift; mask++)
    {
        //find verticals
        //0 == vertical, 1 == horizontal
        int vert = 0;
        for(int x=0; x < W; x++)
        {
            int cur = 0;
            for(int y=0; y < H; y++)
            {
                //vertical
                if((mask & (1 << (x*H + y))) == 0)
                {
                    cur = cur*10 + (board[y][x] - '0');
                }
                else // horizontal
                {
                    vert += cur;
                    cur = 0;
                }
            }
            vert += cur;
        }
        
        //find horizontals
        int hori = 0;
        for(int y = 0; y < H; y++)
        {
            int cur = 0;
            for(int x=0; x < W; x++)
            {
                //horizontal
                if((mask & (1<<(x*H +y))) != 0)
                {
                    cur = cur*10 + (board[y][x] - '0');
                }
                else //vertical
                {
                    hori += cur;
                    cur = 0;
                }
            }
            hori += cur;
        }
        res = max(res, (vert+hori));
    }
	return res;
}
 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CutTheNumbers *obj;
	int answer;
	obj = new CutTheNumbers();
	clock_t startTime = clock();
	answer = obj->maximumSum(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"123","312"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 435;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"99","11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 182;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"001","010","111","100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1131;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"8"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
