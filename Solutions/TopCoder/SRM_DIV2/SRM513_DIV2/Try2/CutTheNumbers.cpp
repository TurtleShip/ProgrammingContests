#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class CutTheNumbers {
public:
	int maximumSum(vector <string>);
};

int toInt(char ch)
{
    return ( (int)ch - (int)'0');
}

/*
 Maximum size of board is 4x4. 
 => Board is small enough to use brute force.
 
 It is obvious that longer length results in better results,
 no matter what the numbers are at each digit.
 For example, let's say there are x , y, z
 x + y + z = two digit number at best. 27 At best.
 xy + z = 99 + 9 = 108 at best
 xyz = 999 at best
 
 What we need to decide is whether to include board[i][j]
 in horizontal or vertical strip.
 Each piece has two options, and there are 16 such pieces.
 2^16  <= (2^10) * (2^10) = 1024 * 1024 ~~ 1,000,000 == 10^6 small enough.
 
 How to try every combination can be difficult.
 I will use a bitset for this.
 Condition of board[i][j] will depend on (1<<(i*|C| + j)) where |C| = number of pieces in a column
 Maximum is (1<<(4*3 + 4)) = (1<<(16)).
 Integer stores 32 bits, and long long stores 64 bits.
 Integer is big enough
 */

int CutTheNumbers::maximumSum(vector <string> board) {

    int R = board.size();
    int C = board[0].size();
    int best = 0;
    for(int i=0; i <= (1<<(R*C)); i++)
    {
        //extract condition for each piece
        //condi[r][c] == true if board[r][c] is vertical
        bool condi[R][C];
    
        for(int r = 0; r < R; r++)
            for(int c = 0; c< C; c++)
            {
                if( ( i & (1<<(r*C + c)) ) != 0) condi[r][c] = true;
                else condi[r][c] = false;
            }
        
        int cur = 0;
        
        //add verticals
        for(int r=0; r < R; r++)
        {
            int temp = 0;
            for(int c = 0; c< C; c++)
            {
                if(condi[r][c]) 
                {
                    temp = temp*10 + toInt(board[r][c]);
                }
                else
                {
                    cur += temp;
                    temp = 0;
                }
            }
            cur += temp;
        }
        
        //add horizontals
        for(int c=0; c < C; c++)
        {
            int temp = 0;
            for(int r = 0; r < R; r++)
            {
                if(!condi[r][c])
                {
                    temp = temp*10 + toInt(board[r][c]);
                }
                else
                {
                    cur += temp;
                    temp = 0;
                }
            }
            cur += temp;
        }
        
        best = max(best , cur);
    }
  
    return best;
	
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CutTheNumbers *obj;
	int answer;
	obj = new CutTheNumbers();
	clock_t startTime = clock();
	answer = obj->maximumSum(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"123","312"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 435;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"99","11"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 182;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"001","010","111","100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1131;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"8"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
