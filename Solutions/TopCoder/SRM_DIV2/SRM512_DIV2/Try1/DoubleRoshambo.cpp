#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
 
class DoubleRoshambo {
public:
	int maxScore(vector <string> A, vector <string> E);
};

// 0 = lose, 1 = draw , 2 = win
int GetResult(char a, char b)
{
    if(a == b) return 1;
    if(a == 'R')
    {
        if(b == 'S') return 2;
        else return 0;
    }
    if(a == 'P')
    {
        if(b == 'R') return 2;
        else return 0;
    }
    if(a == 'S')
    {
        if(b == 'P') return 2;
        else return 0;
    }
    //This line should never be reached
    cout<<"What The Hell"<<endl;
    return -1;
   
}

int GetPoints(char aL, char aR, char bL, char bR)
{
    if(GetResult(aR,bR) == 2 && GetResult(aL, bL) == 2) return 2;
    if(GetResult(aR,bR) == 2 && GetResult(aL, bL) == 1) return 1;
    return 0;
    
}

int DoubleRoshambo::maxScore(vector <string> A, vector <string> E){
	int N = A.size();
    int maxPoint = 0;
    bool usedA[N];
    bool usedB[N];
    for(int i=0;i<N;i++)
    {
        usedA[i] = false;
        usedB[i] = false;
    }
    /* Be greedy.
     Find the ones that give the current one 2.
     Next find the ones that give the current one 1 
     it will take O(N*N * 2) => O(N^2)
     */
    
    //find the ones that give me 2
    for(int i=0; i < N; i++)
    {
        if(usedA[i]) continue;
        for(int j=0; j < N; j++)
        {
            if(usedB[j]) continue;
            if(GetPoints(A[i][0], A[i][1], E[j][0], E[j][1]) == 2)
            {
                maxPoint += 2;
                usedA[i] = true;
                usedB[j] = true;
                break;
            }
        }
    }
    //find the ones that give me 1
    for(int i=0; i < N; i++)
    {
        if(usedA[i]) continue;
        for(int j=0; j < N; j++)
        {
            if(usedB[j]) continue;
            if(GetPoints(A[i][0], A[i][1], E[j][0], E[j][1]) == 1)
            {
                maxPoint += 1;
                usedA[i] = true;
                usedB[j] = true;
                break;
            }
        }
    }

    return maxPoint;
}
 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DoubleRoshambo *obj;
	int answer;
	obj = new DoubleRoshambo();
	clock_t startTime = clock();
	answer = obj->maxScore(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"RR"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"SS"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"SR","PP"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"PR","RS"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"PP","PP","PP","PP"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RR","PR","SS","SP"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"PS","RS","PP","SP","RR","SS","SP"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RP","SP","RR","SR","RS","SP","SS"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 10;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
