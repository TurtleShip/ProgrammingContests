#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class DoubleRoshambo {
public:
	int maxScore(vector <string>, vector <string>);
};

/*
 returns
 0 if it is a tie
 1 if a beats b
 -1 if a loses
 */
int roshambo(char a, char b)
{
    if(a == b) return 0;
    
    if(b == 'R')
    {
        if(a == 'P') return 1;
        return -1;
    }
    if(b == 'P')
    {
        if(a == 'S') return 1;
        return -1;
    }
    if(b == 'S')
    {
        if(a == 'R') return 1;
        return -1;
    }
    
    cout<<"roshambo cause error"<<endl;
    return 911;
}

int getScore(string ash, string elsh)
{
    int left = roshambo(ash[0], elsh[0]);
    int right = roshambo(ash[1], elsh[1]);
    
    if(left == 1 && right == 1)
        return 2;
    
    if(left == 0 && right == 1)
        return 1;
    
    return 0;
}

/*
 number of hand played = N <= 50
 
 Brute force
 (50!) * (50!) .... way too big.
 
 Let's use greedy.
 For each hand a played by Ash, find hand e played by E that
 results maximum score for Ash.
 So we find hands resulting in 2, then to 1.
 This approach doesn't "hurt" the optimal solution.
 */

int DoubleRoshambo::maxScore(vector <string> A, vector <string> E) {
	
    int N = A.size();
    int maxScore = 0;
    bool playedA[N];
    bool playedE[N];
    memset(playedA, false, sizeof(playedA));
    memset(playedE, false, sizeof(playedE));
    
    //This is a greedy algorithm, meaning we will find combinations
    //that results in 2 first, and then 1
    for(int score = 2; score > 0; score--)
    {
        for(int a=0; a < N; a++)
        {
            if(playedA[a]) continue;
            int ch = 0;
            bool found = false;
            for(int b=0; b < N; b++)
            {
                if(playedE[b]) continue;
            
                if(getScore(A[a],E[b]) == score)
                {
                    ch = b; 
                    found = true;
                    maxScore += score;
                    break;
                }
            }
            if(found)
            {
                playedA[a] = true;
                playedE[ch] = true;
            }
        }
    }
    
    
    
    return maxScore;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DoubleRoshambo *obj;
	int answer;
	obj = new DoubleRoshambo();
	clock_t startTime = clock();
	answer = obj->maxScore(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"RR"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"SS"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"SR","PP"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"PR","RS"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"PP","PP","PP","PP"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RR","PR","SS","SP"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"PS","RS","PP","SP","RR","SS","SP"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"RP","SP","RR","SR","RS","SP","SS"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 10;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
