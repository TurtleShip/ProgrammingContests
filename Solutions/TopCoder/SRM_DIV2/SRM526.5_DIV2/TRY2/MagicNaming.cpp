#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class MagicNaming {
public:
	int maxReindeers(string);
};

int MagicNaming::maxReindeers(string name) {
	int N = name.size();
    int dp[N][N];
    int ans = 1;
    memset(dp, -1, sizeof(dp));
    
    REP(i,0,N)
    {
        REP(j,i,N)
        {
            if(i==0)
            {
                dp[i][j] = 1; //base case
            }
            else
            {
                /* certain states are incorrect. 
                 For example, dp[2][2] in test case 0 cannot ever be reached.
                 So we need to mark this state by giving it a large negative number.
                 If we do not do so and give it a small negative number,
                 dp may mistake an unreacheable state as a correct one, and later outputs it as a correct answer.
                 Like dp[4][10] = -1,  dp[5][10] = 0 , dp[6][10] = 1.....
                 So even though dp[4][10] is incorrect state, this can happen if
                 negative number if too small. */
                //dp[i][j] = -100000;
                
                /*
                 Alternative to prevent above problem is to make dp check if 
                 the previous state is correct, like below
                 if(dp[k][i-1] == -1) continue;
                 test 2, and test 3 are good examples of the above problems */
                dp[i][j] = -1;
                REP(k,0,i)
                {
                    string prev = name.substr(k,(i-k)); //name[k...(i-1)]
                    string cur = name.substr(i,(j-i+1));
                    //cout<<"prev : "<<prev<<" , cur : "<<cur<<endl;
                    if((prev+cur).compare(cur+prev) <= 0)
                    {
                        if(dp[k][i-1] == -1) continue;
                        dp[i][j] = max(dp[i][j], dp[k][i-1] + 1);
                    }
                }
            }
            if(j == (N-1))
            {
                ans = max(ans, dp[i][j]);
            }
        }
    }
    
//    REP(i,0,N)
 //   REP(j,0,N)
   // cout<<"["<<i<<"]["<<j<<"] : "<<dp[i][j]<<endl;
    return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	MagicNaming *obj;
	int answer;
	obj = new MagicNaming();
	clock_t startTime = clock();
	answer = obj->maxReindeers(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = "aba";
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "babbaba";
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "philosophersstone";
	p1 = 5;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "knuthmorrispratt";
	p1 = 7;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "acrushpetrtourist";
	p1 = 7;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "zzzzz";
	p1 = 5;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
