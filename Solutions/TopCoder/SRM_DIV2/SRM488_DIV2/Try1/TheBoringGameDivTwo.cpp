#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class TheBoringGameDivTwo {
public:
	vector <int> find(int, int, int, int, int, int);
};

vector <int> TheBoringGameDivTwo::find(int scoreJ, int killedJ, int scoreB, int killedB, int scoreF, int killedF) {
    
    vector<int> ans;
    
    if( (killedF - scoreJ - scoreB) != (killedJ + killedB - scoreF) ) return ans;
    
    int maxV = -1;
    int minV = 100;
    
    for(int La = 0; La <= 47; La++)
        for(int Lb = 0; Lb <= 47; Lb++)
            for(int Na = 0; Na <= 47; Na++)
                for(int Nb = 0; Nb <= 47; Nb++)
                {
                    int A = scoreJ + La - Na;
                    int B = scoreB + Lb - Nb;
                    int W = (scoreF - La - Lb - Na - Nb)/2;
                    int Db = killedJ - W - La - Lb - Nb;
                    int Da = killedB - W - La - Lb - Na;
                    
                    if(A >= 0 && B >= 0 && W >= 0 && Db >= 0 && Da >= 0 && (scoreF - La - Lb - Na - Nb)%2 == 0)
                    {
                        int cur = La + Lb + Na + Nb + A + B + W + Da + Db;
                        maxV = max(maxV, cur);
                        minV = min(minV, cur);
                    }
                }
    
    if(maxV == -1) return ans;
    
    ans.push_back(minV);
    ans.push_back(maxV);
    
	return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, bool hasAnswer, vector <int> p6) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5;
	cout << "]" << endl;
	TheBoringGameDivTwo *obj;
	vector <int> answer;
	obj = new TheBoringGameDivTwo();
	clock_t startTime = clock();
	answer = obj->find(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p6.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p6[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p6.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p6[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	vector <int> p6;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 1;
	p2 = 1;
	p3 = 1;
	p4 = 2;
	p5 = 2;
	int t6[] = {2,3};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 0;
	p1 = 0;
	p2 = 0;
	p3 = 0;
	p4 = 0;
	p5 = 0;
	int t6[] = {0,0};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 7;
	p2 = -2;
	p3 = 5;
	p4 = 1;
	p5 = 9;
	p6.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1;
	p1 = 5;
	p2 = -1;
	p3 = 4;
	p4 = 3;
	p5 = 6;
	int t6[] = {8,9};
			p6.assign(t6, t6 + sizeof(t6) / sizeof(t6[0]));
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
