#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
 
class MagicalGirlLevelTwoDivTwo {
public:
	string isReachable(vector <int> jumpTypes, int x, int y);
};

string MagicalGirlLevelTwoDivTwo::isReachable(vector <int> jumpTypes, int x, int y){
	bool board[130][130] = {false};
    int N = jumpTypes.size();
    int cushion = 60;
    string yes = "YES";
    string no = "NO";
    
    board[cushion][cushion] = true; //starting position
    int maxV = 0;
    for(int i = 0; i < N; i++)
        maxV = max(maxV, jumpTypes[i]);
    
    int count = maxV * (abs(x) + abs(y)) ;
 
    while(count--)
    {
        for(int i = -30; i <= 30; i++)
            for(int j = -30; j <= 30; j++)
            {
                if(board[i+cushion][j+cushion])
                {
                    for(int k=0; k < N; k++)
                    {
                        int n = jumpTypes[k];
                        board[i+n+cushion][j+1+cushion] = true;
                        board[i+n+cushion][j-1+cushion] = true;
                        board[i-n+cushion][j+1+cushion] = true;
                        board[i-n+cushion][j-1+cushion] = true;
                        board[i+1+cushion][j+n+cushion] = true;
                        board[i-1+cushion][j+n+cushion] = true;
                        board[i+1+cushion][j-n+cushion] = true;
                        board[i-1+cushion][j-n+cushion] = true;
                    }
                }
            }
        if(board[x+cushion][y+cushion]) break;
    }
    /*for(int i= -30; i <= 30; i++)
        for(int j= -30; j <=30; j++)
            if(board[i+cushion][j+cushion]) cout<<"( "<<i<<" , "<<j<<" )"<<endl;*/
    //special case : (0,0)
    if(board[x+cushion][y+cushion]) return yes;
    return no;
}
 

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	MagicalGirlLevelTwoDivTwo *obj;
	string answer;
	obj = new MagicalGirlLevelTwoDivTwo();
	clock_t startTime = clock();
	answer = obj->isReachable(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	int p2;
	string p3;
	
	{
	// ----- test 0 -----
	int t0[] = {2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 4;
	p3 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	p2 = 4;
	p3 = "NO";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,2,3,4,5,6,7,8,9,10};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -30;
	p2 = 27;
	p3 = "YES";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {29};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 29;
	p2 = 0;
	p3 = "NO";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING 
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
