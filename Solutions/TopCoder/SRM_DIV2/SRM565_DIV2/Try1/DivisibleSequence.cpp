#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class DivisibleSequence {
public:
	int count(int, int);
};

ll mod = 1000000009ll;

// number of prime factors
ll facts[55];

ll modPow(ll x, ll y) {
    ll r = 1ll;
    ll a = x;
    while(y > 0) {
        if( (y&1) == 1) {
            r = (r * a) % mod;
        }
        a = (a * a) % mod;
        y /= 2;
    }
    
    return r;
}

ll modInverse(ll x) {
    return modPow(x, mod - 2);
}

ll modDivision(ll p, ll q) {
    return (p * modInverse(q)) % mod;
}

ll getCombi(ll n, ll k) {
    
    if(k > n) return 0;
    
    ll p = 1ll;
    ll q = 1ll;
    for(int i=1; i <= k; i++) {
        q = (q*i) % mod;
        p = (p * (n-i+1) ) % mod;
    }
    return modDivision(p, q);
}

int DivisibleSequence::count(int N, int _seqLen) {
	ll seqLen = _seqLen;
    if(seqLen == 1) return 1;
    
    int primeLen = 0;
    int num = N;
    ll res = 1ll;
    for(int i=2; i * i <= num; i++) {
        if(num % i == 0) {
            facts[primeLen] = 0;
            while(num % i == 0) {
                num /= i;
                facts[primeLen]++;
            }
            primeLen++;
        }
    }
    
    if(num != 1) facts[primeLen++] = 1;
    
    for(int i=0; i < primeLen; i++) {
        res = (res * getCombi(seqLen-1ll+facts[i], facts[i])) % mod;
    }
    
    return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	DivisibleSequence *obj;
	int answer;
	obj = new DivisibleSequence();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 3;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 6;
	p1 = 3;
	p2 = 9;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 10;
	p1 = 2;
	p2 = 4;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 1;
	p1 = 10000;
	p2 = 1;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 30;
	p1 = 4;
	p2 = 64;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 25883;
	p1 = 100000;
	p2 = 991000009;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
