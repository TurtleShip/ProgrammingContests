#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class IPv444 {
public:
	long long getMaximumMoney(vector <string>, vector <int>);
};

struct IP
{
    string adr[4];
    ll price;
    ll rem;
    IP(){}
};


bool sortByPrice(IP a, IP b)
{
    return a.price > b.price;
}

ll howMany(string[], string[]);
void printIP(IP a)
{
    cout<<"IP : "<<a.adr[0]<<"."<<a.adr[1]<<"."<<a.adr[2]<<"."<<a.adr[3]<<endl;
    cout<<"price : "<<a.price<<endl;
    cout<<"rem : "<<a.rem<<endl;
    cout<<endl;
}

void printIPadr(IP a)
{
    cout<<a.adr[0]<<"."<<a.adr[1]<<"."<<a.adr[2]<<"."<<a.adr[3];
}

long long IPv444::getMaximumMoney(vector <string> req, vector <int> pr) {
	int N =req.size();
    ll ans = 0ll;
    vector<IP> ip(N);
    /*
     1. sort ip by its price in non-increasing order.
     2. Sell highest-priced ip first.
     3. Whenever we sell ip, update rem of other ip's.
     */
    
    for(int i=0; i < N; i++)
    {
        replace(req[i].begin(), req[i].end(), '.', ' ');
        stringstream ss(req[i]);
        for(int j=0; j < 4; j++)
            ss>>ip[i].adr[j];

        ip[i].price = ll(pr[i]);
        int num = count(req[i].begin(), req[i].end(), '*');
        ip[i].rem = ll(pow(10.0, 3 * num));
    }
    
    sort(ip.begin(), ip.end(), sortByPrice);

    
    for(int i=0; i < N; i++)
    {
        printIP(ip[i]);
        if(ip[i].rem <= 0) continue;
        ans += ip[i].rem * ip[i].price;
        
        for(int j=(i+1); j < N; j++)
        {
            ip[j].rem -= howMany(ip[j].adr, ip[i].adr);
            
         /*   cout<<"howMany(";
            printIPadr(ip[j]);
            cout<<" , ";
            printIPadr(ip[i]);
            cout<<") : "<<howMany(ip[j].adr, ip[i].adr)<<endl;*/
            
           // cout<<howMany(ip[i].adr, ip[j].adr)<<" ";
        }
        
     //   cout<<endl;
     //   cout<<endl;
    }
    
    
    return ans;
}

/*
 Calculate how many ip from "b" belongs to "a"
 */
ll howMany(string a[], string b[])
{
    ll res = 1ll;
    for(int i=0; i < 4; i++)
    {
        //cout<<"a["<<i<<"] : "<<a[i]<<" , b["<<i<<"] : "<<b[i]<<endl;
        if(b[i] == "*")
        {
            if(a[i] == "*")
            {
                res *= ll(pow(10.0,3));
            }
        }
        else
        {
            if(a[i] != "*" && a[i] != b[i])
                return 0ll;
        }
    }
    return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	IPv444 *obj;
	long long answer;
	obj = new IPv444();
	clock_t startTime = clock();
	answer = obj->getMaximumMoney(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	long long p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"66.37.210.86"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {47};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 47ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"0.0.0.*","0.0.0.3","0.0.0.5"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,3,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1010ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"*.*.*.*","123.456.789.0","434.434.434.434","999.*.999.*"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,5,3,6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1000005000006ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"*.*.999.999","888.888.999.*","888.888.*.999","777.777.777.777","777.*.*.777"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {19,33,42,777,7};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 26075718ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"127.0.0.1","*.0.0.*","*.*.255.255","192.68.*.*"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {999999,629851,294016,438090};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1361957076132ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
