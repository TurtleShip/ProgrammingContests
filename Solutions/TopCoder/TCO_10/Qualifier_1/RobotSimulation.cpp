#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class RobotSimulation {
public:
	int cellsVisited(string, int);
};

set< pair<int,int> >mem;
int N;
int x,y;
string pro;

int visit(int);

int RobotSimulation::cellsVisited(string program, int times) {
	
    /*
     Let's do simulation.
     Do simulation until we find a pattern
     */
    pro = program;
    N = pro.size();
    x = y = 0;
    mem.insert( make_pair(x,y) );
    int diff = visit(0);
    int ans = 1 + diff;
    int lim = times - 20;
    times--;
    while(max(lim,0) < times)
    {
        diff =visit(0);
        ans += diff;
        times--;
    }

    ans += times * diff;
    return ans;

}

int visit(int idx)
{
    if(idx == N) return 0;
    
    if(pro[idx] == 'U') y++;
    else if(pro[idx] == 'D') y--;
    else if(pro[idx] == 'R') x++;
    else if(pro[idx] == 'L') x--;
    
    pair<int,int> next = make_pair(x,y);
    int ct = (mem.count(next) == 0) ? 1 : 0;
    mem.insert(next);
    return ct + visit(idx+1);
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	RobotSimulation *obj;
	int answer;
	obj = new RobotSimulation();
	clock_t startTime = clock();
	answer = obj->cellsVisited(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "RRR";
	p1 = 100;
	p2 = 301;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "DDU";
	p1 = 100;
	p2 = 102;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "URLD";
	p1 = 100;
	p2 = 3;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "UUDUDDLLDR";
	p1 = 1;
	p2 = 7;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "UUDUDDLLDR";
	p1 = 12345678;
	p2 = 37037039;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "RRUUULLDD";
	p1 = 3603602;
	p2 = 10810815;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
