#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class HandlesSpelling {
public:
	int spellIt(vector <string>, vector <string>);
};

const int maxN = 20 * 50 + 10;

/*
 isCovered[i][j] is true if substring of sen [i, j) can be covered.
 unL[i] = minimum number of uncovered strings in [0, i)
 unR[i] = minimum number of uncovered strings in [i, N) where N = length of sen
 */
bool isCovered[maxN][maxN];
int unL[maxN];
int unR[maxN];
int HandlesSpelling::spellIt(vector <string> parts, vector <string> badges) {
	
    string sen = "";
    for(int i=0; i < parts.size(); i++)
        sen += parts[i];
    
    int N = sen.size();
    memset(isCovered, false, sizeof(isCovered));
    
    //base cases for isCovered
    for(int i=0; i < badges.size(); i++)
    {
        int lim = N - badges[i].size();
        for(int j=0; j <= lim; j++)
        {
            bool isValid = true;
            for(int k=0; isValid && k < badges[i].size(); k++)
                if(badges[i][k] != sen[j+k])
                    isValid = false;
            if(isValid)
                isCovered[j][j+badges[i].size()] = true;
        }
    }
    
    /*
     complete isCovered
     isCovered[i][j] is true if substring of sen [i, j) can be covered
     isCovered[i][k] can be true if (isCovered[i][j] && isCovered[j][k])
     Note that 
     0 <= i < N
     i <= k <= N
     i < j < k
     Runtime : O(N*N*N) = O(N^3)
    */
    for(int i=0; i < N; i++)
    {
        //empty string, which is always true.
        isCovered[i][i] = true;
        for(int k=i+1; k <= N; k++)
        {
            if(isCovered[i][k]) continue;
            for(int j=i; !isCovered[i][k] && j < k; j++)
                if(isCovered[i][j] && isCovered[j][k])
                    isCovered[i][k] = true;
        }
    }
    
    //fill unL and unR
    unL[0] = 0; //base case : empty string
    unR[N] = 0; //base case : empty string
    
    for(int i=1; i < N; i++)
    {
        /*
         unL[i] = minimum number of uncovered strings in [0, i)
         If sen[j,,,i) is covered, then we only have to worry about
         letters in sen[0..j)
         */
        unL[i] = unL[i-1] + 1;
        for(int j=i-1; j >= 0; j--)
            if(isCovered[j][i])
                unL[i] = min(unL[i], unL[j]);
    }
    
    for(int i=N-1; i >= 0; i--)
    {
        /*
         unR[i] = minimum number of uncovered strings in [i, N)
         If sen[i..j) is covered, we only have to worry about
         letters in [j...N)
         */
        unR[i] = unR[i+1] + 1;
        for(int j=i+1; j <= N; j++)
            if(isCovered[i][j])
                unR[i] = min(unR[i], unR[j]);
    }
    
    // We try every possible scenario.
    int ans = -N; //worst scenario
    for(int i=0; i < N; i++)
        for(int j=i+1; j <= N; j++)
            if(isCovered[i][j]) //A = (j-i)
                ans = max(ans, (j-i)*(j-i) - (unL[i] + unR[j])); 
    
    return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	HandlesSpelling *obj;
	int answer;
	obj = new HandlesSpelling();
	clock_t startTime = clock();
	answer = obj->spellIt(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	int p2;
	
	{
        // ----- test 0 -----
        string t0[] = {"HELLO"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"E","HE","L"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 15;
        all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 1 -----
        string t0[] = {"ALGORITHM","QUALIFICATION","ROUND","TWO"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"AL","CAT","GOR","IFI","ION","ROUND","T"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 282;
        all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 2 -----
        string t0[] = {"GOOD","LUCK"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"GOODLUCKBJ","G","L"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = -5;
        all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	{
        // ----- test 3 -----
        string t0[] = {"ANDDOHAVEFUN"};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        string t1[] = {"HAV"};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        p2 = 0;
        all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
        // ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
