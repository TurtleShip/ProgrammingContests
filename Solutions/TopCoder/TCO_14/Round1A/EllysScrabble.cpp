#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

typedef long long ll; 

class EllysScrabble {
public:
	string getMin(string letters, int maxDistance);
};

string EllysScrabble::getMin(string letters, int maxDistance) {
	
	string res = letters;

	int N = letters.size();
	bool used[N];
	fill( used, used+N, false );
	for(int i=0; i < N; i++) {

		// The case where we must use it
		if((i-maxDistance) >= 0 && !used[i-maxDistance]) {
			res[i] = letters[i-maxDistance];
			continue;
		}

		char cur = (used[i]) ? char('Z' + 1) : res[i];
		/*
			Too tired to implement right now, but the below logic should work.
			Check the range of [i-2, i+3].
			Find the smallest one.

			Now, go through the range of [i-2, i+3] one more time.
			But this time, go in the order of i-2, i-1, i+1, i+2, i+3
		*/
		bool found = false;
		int leftLim = max(0, i-maxDistance+1);
		int rightLim = min(i+maxDistance, N-1);

		for(int j=leftLim; j < i; j++)
			if(!used[j] && letters[j] <= cur) {
				found = true;
				cur = letters[j];
			}

		for(int j=i+1; j <= rightLim; j++)
			if(!used[j] && letters[j] < cur) {
				found = true;
				cur = letters[j];
			}

		if(found) {
			bool marked = false;
			for(int j=leftLim; !marked && j < i; j++) {
				if(!used[j] && cur == letters[j]) {
					marked = true;
					used[j] = true;	
				}
			}

			for(int j=i+1; !marked && j <= rightLim; j++) {
				if(!used[j] && cur == letters[j]) {
					marked = true;
					used[j] = true;
				}
			}
		} else {
			used[i] = true;
		}
	
		res[i] = cur;
	}

	return res;
}
 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	EllysScrabble *obj;
	string answer;
	obj = new EllysScrabble();
	clock_t startTime = clock();
	answer = obj->getMin(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "TOPCODER";
	p1 = 3;
	p2 = "CODTEPOR";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "ESPRIT";
	p1 = 3;
	p2 = "EIPRST";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "BAZINGA";
	p1 = 8;
	p2 = "AABGINZ";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	p1 = 9;
	p2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "GOODLUCKANDHAVEFUN";
	p1 = 7;
	p2 = "CADDGAHEOOFLUKNNUV";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "AAAWDIUAOIWDESBEAIWODJAWDBPOAWDUISAWDOOPAWD";
	p1 = 6;
	p2 = "AAAADDEIBWAEUIODWADSBIAJWODIAWDOPOAWDUOSPWW";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = "ABRACADABRA";
	p1 = 2;
	p2 = "AABARACBDAR";
	all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
