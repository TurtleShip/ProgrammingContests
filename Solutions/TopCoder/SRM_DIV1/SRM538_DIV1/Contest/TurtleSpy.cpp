#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)

int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class TurtleSpy {
public:
	double maxDistance(vector <string>);
};

double TurtleSpy::maxDistance(vector <string> cmd) {
    double PI = 2.0 * acos(0);
    double f = 0.0 , b = 0.0 ;
    double sum = 0.0;
    vector<double> degs;
    
    int N = cmd.size();
    for(int i=0; i < N; i++)
    {
        stringstream ss;
        ss<<cmd[i];
        string curCmd;
        double val;
        ss>>curCmd>>val;
        if(curCmd == "right")
        {
            degs.push_back(val);
            sum += val;
        }
        if(curCmd == "left")
        {
            degs.push_back(-val);
            sum -= val;
        }
        if(curCmd == "forward")
        {
            f += val;
        }
        if(curCmd == "backward")
        {
            b += val;
        }
    }

    //we assume forward is larger
    if(b > f)
        swap(f, b);
    
    if(b == 0.0) //straight line
        return f;
    
    double deg;
    //get optimal degree
    sort(degs.begin(), degs.end());
    double cur = sum;
    int M = degs.size();
    //find 180
    int s = 0;
    int t = M-1;
    while(s < t)
    {
        double sMove = cur - degs[s];
        double tMove = cur - degs[t];
        
        double curAway = abs(180.0 - cur);
        double sAway = abs(180.0 - sMove);
        double tAway = abs(180.0 - tMove);
        
        if(curAway < min(sAway, tAway))
            break;
        
        if(sAway < tAway)
        {
            s++;
            cur = sMove;
        }
        else
        {
            t--;
            cur = tMove;
        }
    }
    
    double cur2 = sum;
    //find -180
    s = 0;
    t = M-1;
    while(s < t)
    {
        double sMove = cur2 - degs[s];
        double tMove = cur2 - degs[t];
        
        double curAway = abs(-180.0 - cur2);
        double sAway = abs(-180.0 - sMove);
        double tAway = abs(-180.0 - tMove);
        
        if(curAway < min(sAway, tAway))
            break;
        
        if(sAway < tAway)
        {
            s++;
            cur2 = sMove;
        }
        else
        {
            t--;
            cur2 = tMove;
        }
    }
    
    if(abs(180.0 - cur) < abs(-180.0 - cur2))
        deg = cur;
    else
        deg = cur2;
    
    return sqrt( pow(f - b * cos(PI * deg / 180.0), 2.0) + pow( b * sin(PI * deg / 180.0), 2.0) );
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, double p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TurtleSpy *obj;
	double answer;
	obj = new TurtleSpy();
	clock_t startTime = clock();
	answer = obj->maxDistance(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p1 - answer) <= 1e-9 * max(1.0, fabs(p1));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	double p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"forward 100","backward 100","left 90"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 141.4213562373095;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"left 45","forward 100","right 45","forward 100"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 200.0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"left 10","forward 40","right 30","left 10","backward 4","forward 4"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 40.58520737741619;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
