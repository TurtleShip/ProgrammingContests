#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

typedef long long ll; 

class CandidatesSelection {
public:
	string possible(vector <string> score, vector <int> result);
};

string CandidatesSelection::possible(vector <string> score, vector <int> result) {
	int N = score.size(); // number of maids
	int M = score[0].size(); // number of skills

	vector<bool> used(M, false);

	vector< set<int> >edges(N); //edges[i] = list of maids who should come AFTER i i.e. (i, ... comes after .. )
	for(int i=0; i < N; i++)
		for(int j=i+1; j < N; j++)
			edges[result[i]].insert(result[j]);

	bool canDelete = true;
	while(canDelete) {
		canDelete = false;

		for(int skill = 0; skill < M; skill++) {
			if(used[skill]) continue;
			bool canUse = true;

			for(int i=0; canUse && i < N; i++) {
				for(int j=i+1; canUse && j < N; j++) {
					/*
					 if (i)th score character is lower than (j)th score character
					 ( so (i) has higher score since 'A' is the lowest character ),
					 then there should be no edge from j to i.
					 */
					if(score[i][skill] < score[j][skill] && edges[j].count(i)) canUse = false;
					if(score[j][skill] < score[i][skill] && edges[i].count(j)) canUse = false;
				}
			}

			if(canUse) {
				canDelete = true;
				used[skill] = true;
				for(int i=0; i < N; i++) {
					for(int j=i+1; j < N; j++) {
						// delete the edges that have been satisfied
						if(score[i][skill] < score[j][skill]) edges[i].erase(j);
						if(score[j][skill] < score[i][skill]) edges[j].erase(i);
					}
				}
			}
		}
	}

	bool isPossible = true;
	for(int i=0; isPossible && i < N; i++) {
		// if there are any unsatisfied edges left, then it should be the initially ordering
		// ,which was 0,1,2,3,...,N-1
		for(int x : edges[i]) {
			isPossible &= i < x;
		}
	}

	return isPossible ? "Possible" : "Impossible";
}
 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	CandidatesSelection *obj;
	string answer;
	obj = new CandidatesSelection();
	clock_t startTime = clock();
	answer = obj->possible(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <int> p1;
	string p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"CC","AA","BB"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"BAB","ABB","AAB","ABA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,0,1,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"BAB","ABB","AAB","ABA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,3,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"AAA","ZZZ"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"ZZZ","AAA"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"ZYYYYX","YXZYXY","ZZZZXX","XZXYYX","ZZZYYZ","ZZXXYZ","ZYZZXZ","XZYYZX"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {3,7,1,0,2,5,6,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
