#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define pb(x) push_back(x)

typedef long long LL; 

class XorCards {
public:
	long long numberOfWays(vector<long long> numbers, long long limit);
};

const int maxBits = 55;

int findRank(vector< vector<int> >& augMat, const int& modulo) {
	int nE = augMat.size();
	int nV = augMat[0].size() - 1;

	vector<bool> used(nE, false);

	// perform row-reduction
	for(int i=0; i < nV; i++) {

		// find the row with non-zero coefficient for this variable
		int rowIdx = -1;
		for(int j=0; rowIdx == -1 && j < nE; j++) {
			if(used[j]) continue;
			if(augMat[j][i] != 0) {
				used[j] = true;
				rowIdx = j;
			}
		}

		if(rowIdx == -1) continue;

		for(int j=0; j < nE; j++) {
			if(used[j]) continue;
			if(augMat[j][i] == 0) continue;

			int mult = 1;
			while( (augMat[rowIdx][i] * mult + augMat[j][i]) % modulo != 0 )
				mult++;
			if(mult == 2) cout<<"WTF"<<endl;

			for(int k=0; k <= nV; k++)
				augMat[j][k] = (augMat[rowIdx][k] * mult + augMat[j][k]) % modulo;
		}
	}

	int rank = nE;
	bool isValid = true;
	// rank is the number of independent rows(= nonzero rows)
	for(int i=0; isValid && i < nE; i++) {
		bool isZero = true;
		for(int j=0; isZero && j < nV; j++)
			isZero &= augMat[i][j] == 0;
		if(isZero) {
			rank--;
			isValid &= augMat[i][nV] == 0;
		}
	}

	return isValid ? rank : -1;
}
/*
	Find the number of ways to select a subset of numbers so that
	their xor sum is exactly limit.
*/
LL findExactWays(const vector<LL>& numbers, const LL& limit, const int& N) {
	/*
		we have one equation for each bit,
		one variable for each number.
		We need additional column for the value of limit for each bit.
	*/
	vector< vector<int> > augMat(maxBits+1, vector<int>(N+1));
	for(int i=0; i <= maxBits; i++) {
		LL bit = 1ll << i;
		for(int j=0; j < N; j++) {
			if(numbers[j] & bit) augMat[i][j] = 1;
			else augMat[i][j] = 0;
		}
		if(limit & bit) augMat[i][N] = 1;
		else augMat[i][N] = 0;
	}

	// find the rank
	int rank = findRank(augMat, 2);
	if(rank == -1) return 0;

	int freeVariables = numbers.size() - rank;
	return 1ll << freeVariables;
} 

long long XorCards::numberOfWays(vector<long long> numbers, long long limit) {

	int N = numbers.size();
	LL res = findExactWays(numbers, limit, N);

	for(int i=1; i <= maxBits; i++) {
		if(limit & (1ll<<(i-1))) {
			// turn the first (i) bits off
			limit = (limit >> i) << i;
			for(LL& number : numbers) {
				// turn the first (i-1) bits off
				number = (number >> (i-1)) << (i-1);
			}

			res += findExactWays(numbers, limit, N);
		}
	}

	return res;
}
 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"";
	cout << "]" << endl;
	FoxAndChess *obj;
	string answer;
	obj = new FoxAndChess();
	clock_t startTime = clock();
	answer = obj->ableToMove(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "R...";
	p1 = "..R.";
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "..R.";
	p1 = "R...";
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = ".L.R.R.";
	p1 = "L...R.R";
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = ".L.R.";
	p1 = ".R.L.";
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "LRLLRLRLLRLLRLRLRL";
	p1 = "LRLLRLRLLRLLRLRLRL";
	p2 = "Possible";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = "L";
	p1 = ".";
	p2 = "Impossible";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
