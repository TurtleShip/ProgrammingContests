#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class MinskyMystery {
public:
	int computeAnswer(long long);
};


//returns true if n is prime
bool isPrime(int n)
{
	if(n <= 1) return false;
	if(n == 2) return true;
	if(n%2 == 0)return false;
	int m = (int)sqrt(n);
	for(int i=3; i <=m; i+=2)
		if(n%i == 0)
			return false;
	return true;
}

ll mod = 1000000009;

int MinskyMystery::computeAnswer(long long N) {
	
    ll ans = 1ll; //at beginning marble is added to bag 1
    
    if(N < 2) return -1;
    
    /*
      at each step, we test if the current number is the smallest 
     factor that divides N.
     There are two possible cases for each step.
     
     case #1 (N%i != 0)
     # of steps
     = 1 + 2*N + ceil(N/i) + N + N
     = 1 + 4*N + ceil(N/i)
     
     case #2 (N%i == 0)
     # of steps
     = 1 + 2*N + N/i + i + (N-i)
     = 1 + 3*N + N/i
    
     Let x = the smallest factor that devides N
     Then we execute case#1 (x - 1(number 1) - 1(number x)) = (x-2) times
     and case #2 1 times.
     
     So total steps would be
     (x-2) * (1 + 4 * N) + sum(ceil(N/i))(2<=i<x) + 1 + 3*N + N/x
     = x-1 + (4*(x-2) + 3) * N + N/x + sum(N/i)(2<=i<x)
     = x-1 + (8x - 5)*N + sum(N/i)(2<=i<=x)
     */
    
    //find x
    ll x = 2;
    bool found = false;
    if(N%2 == 0)
    {
        found = true;
        x = 2;
    }
    if(!found)
    {
        for(ll i = 3; i <= (ll)sqrt(N); i++)
        {
            if(N%i == 0)
            {
                found = true;
                x = i;
                break;
            }
        }
    }
    if(!found)
        x = N;

    ans += (x-1) % mod;
    ans %= mod;
    ans += ( ((4*x - 5) % mod) * N) % mod;
    ans %= mod;
   // ans += (N/x) % mod;
   // ans %= mod;
    
    //calcuate sum(N/i) (2<=i<x)
    //brute force
   /* for(ll i=2; i <= x; i++)
    {
        ans += ((ll)ceil((double)N/(double)i))%mod;
        ans %= mod;
    }*/

     return ans;
}



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	MinskyMystery *obj;
	int answer;
	obj = new MinskyMystery();
	clock_t startTime = clock();
	answer = obj->computeAnswer(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = 2ll;
	p1 = 9;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3ll;
	p1 = 27;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4ll;
	p1 = 16;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2401ll;
	p1 = 59058;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 24ll;
	p1 = 86;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
