#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

typedef long long ll; 

class DengklekMakingChains {
public:
	int maxBeauty(vector <string> chains);
};

bool isUsed[55];
int midLeft[55];
int midRight[55];

int DengklekMakingChains::maxBeauty(vector <string> chains) {
    int left = 0; // maximum value that goes to the "left" of the resulting seq.
    int right = 0; // maximum value that goes to the "right" of the resulting seq.
    int solo = 0;
    int all = 0;
    int res = 0;
    int midNum = 0;
    memset(isUsed, false, sizeof(isUsed));
    memset(midLeft, 0, sizeof(midLeft));
    memset(midRight, 0, sizeof(midRight));
    
    for(int i=0; i < chains.size(); i++) {
        bool hasLeft = chains[i][0] != '.';
        bool hasMid = chains[i][1] != '.';
        bool hasRight = chains[i][2] != '.';
        int curLeft = !hasLeft ? 0 : chains[i][0] - '0';
        int curMid = !hasMid ? 0 : chains[i][1] - '0';
        int curRight = !hasRight ? 0 : chains[i][2] - '0';
        
        if(hasLeft && hasMid && hasRight) {
            all += curLeft + curMid + curRight;
            continue;
        }
        
        if(!hasLeft && hasMid && !hasRight) {
            solo = max(solo, curMid);
            continue;
        }
        
        // this is tricky case
        if(hasLeft && !hasMid && hasRight) {
            midLeft[midNum] = curRight;
            midRight[midNum] = curLeft;
            midNum++;
            continue;
        }
        
        if(hasLeft) right = max(right, curLeft + curMid);
        if(hasRight) left = max(left, curMid + curRight);
    }
    
    res = all + left + right;
    
    // We try every possible mid replacement
    // Number is small enough to try them all
    for(int i=0; i < midNum; i++) {
        res = max(res, all + left + midRight[i]);
        res = max(res, all + midLeft[i] + right);
        for(int j=0; j < midNum; j++) {
            if(i==j) continue;
            res = max(res, all + midLeft[i] + midRight[j]);
            res = max(res, all + midLeft[j] + midRight[i]);
        }
    }
    
    return max(res, solo);
}
 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DengklekMakingChains *obj;
	int answer;
	obj = new DengklekMakingChains();
	clock_t startTime = clock();
	answer = obj->maxBeauty(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {".15","7..","402","..3"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 19;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..1","7..","567","24.","8..","234"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 36;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"...","..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"16.","9.8",".24","52.","3.1","532","4.4","111"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 28;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"..1","3..","2..",".7."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"412","..7",".58","7.8","32.","6..","351","3.9","985","...",".46"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 58;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
