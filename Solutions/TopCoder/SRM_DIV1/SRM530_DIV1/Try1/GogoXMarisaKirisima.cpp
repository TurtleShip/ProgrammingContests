#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define REP(i,a,b) for(int i=a; i < b; i++)
#define REPE(i, a, b) for(int i=a; i <=b; i++)
int INF = numeric_limits<int>::max();
int nINF = numeric_limits<int>::min();
typedef long long ll;
 
class GogoXMarisaKirisima {
public:
	int solve(vector <string>);
};

int GogoXMarisaKirisima::solve(vector <string> choices) {
    /*
     V = number of nodes that are in at least one valid path from node 0 to node (N-1)
     E = number of roads between N nodes.
     
     Ans : E - (V-2)
    */
    int N = choices.size();
    
    /*
     road[i] 
     = 0 if no road is connected to it.
     = 1 if it is reacheable from node 0
     = 2 if it is reacheable from node 0 And can reach node (N-1). */
    
    int road[N];
    memset(road, 0, sizeof(road));
    road[0] = 1; //node 0 is reacheable from itself.
    
    //find if node i is reacheable from node 0 using DFS
    stack<int> S;
    S.push(0);
    while(!S.empty())
    {
        int cur = S.top();
        S.pop();
        
        REP(i,0,N)
            if(choices[cur][i] == 'Y' && road[i] == 0)
            {
                road[i] = 1;
                S.push(i);
            }
    }
    
    if(road[N-1] == 0) return 0; //if node (N-1) is not reacheable from node 0, return 0
    
    //now now if node i can reach node (N-1)
    road[N-1] = 2;
    S.push(N-1);
    while(!S.empty())
    {
        int cur = S.top();
        S.pop();
        
        REP(i,0,N)
            if(choices[i][cur] == 'Y' && road[i] == 1)
            {
                road[i] = 2;
                S.push(i);
            }
    }
    
    int V = count(road, road + N, 2);
    int E = 0;
    //find E
    REP(i,0,N)
    REP(j,0,N)
    if(choices[i][j] == 'Y' && (road[i] + road[j]) == 4)
        E++;
    
    cout<<"V : "<<V<<" , E : "<<E<<endl;
    return E - (V - 2);
}



// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	GogoXMarisaKirisima *obj;
	int answer;
	obj = new GogoXMarisaKirisima();
	clock_t startTime = clock();
	answer = obj->solve(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"NYN","YNY","NNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"NNY","YNY","YNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"NN","NN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"NYYY","NNNY","NNNY","NNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
