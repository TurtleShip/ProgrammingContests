#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

typedef long long ll; 

class EllysCheckers {
public:
	string getWinner(string board);
};

int dp[1<<20];
int N;

int isWin(int mask) {
    if(dp[mask] != -1) return dp[mask];
    
    /*
     Go through all possible moves.
     If any of them leads to a winning position for the current player,
     which is equal to a losing position for the next player,
     the current player will take it and win.
     */
    // take a walk
    for(int i=0; i < N; i++) {
        if(mask & (1<<i))
            if( !( mask & (1<<(i+1))) ) {
                int nmask = mask;
                // the current one is "picked up"
                nmask ^= (1<<i);
                
                // Unless the next spot is the last spot,
                // put it down to the next spot
                if( (i+1) != N-1 )
                    nmask ^= (1<<(i+1));
                
                if(!isWin(nmask)) return dp[mask] = 1;
            }
    }
    
    // take a jump
    for(int i=0; i < N; i++) {
        if(mask & (1<<i))
            if(mask & (1<<(i+1)))
                if(mask & (1<<(i+2)))
                    if( !(mask & (1<<(i+3))) ) {
                        int nmask = mask;
                        nmask ^= (1<<i);
                        
                        if( (i+3) != N-1 )
                            nmask ^= (1<<(i+3));
                        
                        if(!isWin(nmask)) return dp[mask] = 1;
                    }
    }
    
    // There is no way the current player can win
    return dp[mask] = 0;
}

string EllysCheckers::getWinner(string board) {
    N = board.size();
    int mask = 0;
    for(int i=0; i < N-1; i++)
        if(board[i] == 'o')
            mask |= (1<<i);
    memset(dp, -1, sizeof(dp));
    return isWin(mask) ? "YES" : "NO";
}
 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	EllysCheckers *obj;
	string answer;
	obj = new EllysCheckers();
	clock_t startTime = clock();
	answer = obj->getWinner(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	string p1;
	
	{
	// ----- test 0 -----
	p0 = ".o...";
	p1 = "YES";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "..o..o";
	p1 = "YES";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = ".o...ooo..oo..";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "......o.ooo.o......";
	p1 = "YES";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = ".o..o...o....o.....o";
	p1 = "NO";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
