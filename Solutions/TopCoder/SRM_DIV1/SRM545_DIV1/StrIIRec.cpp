#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
 
using namespace std;
 
 
class StrIIRec {
public:
	string recovstr(int n, int minInv, string minStr);
};

string solve(string letters, string minStr, int minInv) {
    int N = letters.size();
    if(N == 0) return "";
    
    for(int i=0; i < N; i++) {
        // the result string cannot be lexicographically smaller than minStr
        if(minStr.size() != 0 && letters[i] < minStr[0]) continue;
        int nextInv = max(0, minInv - i);
        
        // check if this is valid
        int nextN = N - 1;
        if( ( nextN * (nextN-1) ) / 2 < nextInv ) continue;
        string nextLet = letters.substr(0, i) + letters.substr(i+1);
        string nextMinStr = "";
        if(minStr.size() > 0 && letters[i] == minStr[0]) nextMinStr = minStr.substr(1);
        
        return letters[i] + solve(nextLet, nextMinStr, nextInv);
    }
    return "";
}

string StrIIRec::recovstr(int n, int minInv, string minStr) {
	string letters = "abcdefghijklmnopqrstuvwxyz";
    return solve(letters.substr(0,n), minStr, minInv);
}
 
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, string p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	StrIIRec *obj;
	string answer;
	obj = new StrIIRec();
	clock_t startTime = clock();
	answer = obj->recovstr(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 1;
	p2 = "ab";
	p3 = "ba";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 9;
	p1 = 1;
	p2 = "efcdgab";
	p3 = "efcdgabhi";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 11;
	p1 = 55;
	p2 = "debgikjfc";
	p3 = "kjihgfedcba";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 15;
	p1 = 0;
	p2 = "e";
	p3 = "eabcdfghijklmno";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 9;
	p1 = 20;
	p2 = "fcdebiha";
	p3 = "fcdehigba";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
